<%@ jet 
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
	org.talend.core.model.metadata.MappingTypeRetriever
	org.talend.core.model.metadata.MetadataTalendType
	org.talend.core.model.process.IConnectionCategory	
	org.talend.core.model.utils.NodeUtil
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.HashMap
"
skeleton="../templates/db_output_bulk.skeleton"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
	String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
	String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
	List<Map<String, String>> addCols =
			(List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__");

	boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));
	
	List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");
	
	String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
	boolean isEnableDebug = ("true").equals(ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__"));
	boolean batchMode = ("true").equals(ElementParameterParser.getValue(node, "__BATCH_MODE__"));
	String batchSize = ElementParameterParser.getValue(node, "__BATCH_SIZE__");
	boolean useExistingConnection = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
	
   	String db_version = ElementParameterParser.getValue(node, "__DB_VERSION__");
	if(useExistingConnection){
		String connName = ElementParameterParser.getValue(node,"__CONNECTION__");
		INode con_node = NodeUtil.getNodeByUniqueName(node.getProcess(),connName);
		if(con_node!=null){
			db_version = ElementParameterParser.getValue(con_node,"__DB_VERSION__");
		}
	}
	//feature:2880
	getManager(dbmsId, cid, node);
	boolean whereSupportNull = ElementParameterParser.getValue(node, "__SUPPORT_NULL_WHERE__").equals("true");
	
	String incomingConnName = null;
	List<IMetadataColumn> columnList = getColumnList(node);
	
	List< ? extends IConnection> conns = node.getIncomingConnections();
	IConnection inConn = null;
	if(conns!=null && conns.size()>0){
		inConn = conns.get(0);
		incomingConnName = inConn.getName();
	}
		
	String rejectConnName = null;
	List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
	if(rejectConns != null && rejectConns.size() > 0) {
		IConnection rejectConn = rejectConns.get(0);
		rejectConnName = rejectConn.getName();
	}
	List<IMetadataColumn> rejectColumnList = null;
	IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
	if(metadataTable != null) {
		rejectColumnList = metadataTable.getListColumns();
	}
	
	boolean manualCommit = !("0").equals(commitEvery);
	boolean addBatch = rejectConnName==null && (batchMode||(!useExistingConnection && manualCommit));
	List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
	for(IConnection conn : outgoingConns) {
		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
%>
			<%=conn.getName() %> = null;
<%
		}
	}
	
	List<Column> stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
	
	////////////////////////////////////////////////////////////
	List<Column> colStruct =  new ArrayList();
	for(Column colStmt : stmtStructure) {
		if(!colStmt.isReplaced() && !colStmt.isAddCol()) {
			colStruct.add(colStmt);
		}
	}

	if(isEnableDebug) {
%>
		query_<%=cid%> = new StringBuffer("");
<%
	}

	boolean isParallelize ="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__PARALLELIZE__"));
	
	if (isParallelize) { // bug0014422
		String tAsyncIn_cid = "";
		if(conns!=null && conns.size() > 0) {
			tAsyncIn_cid = conns.get(0).getSource().getUniqueName();
		}
		if(!useExistingConnection) {
			if(manualCommit) {
%>
				commitEvery_<%=cid%> = buffersSize_<%=tAsyncIn_cid%>;
<%
			}
		}
		
		if (batchMode) {
			if(!("").equals(batchSize)&&!("0").equals(batchSize)) {
%>
				batchSize_<%=cid%> = buffersSize_<%=tAsyncIn_cid%>;
<%
			}
		}
	}

	if(incomingConnName != null && columnList != null) {
%>
			whetherReject_<%=cid%> = false;
<%
		if(("INSERT").equals(dataAction)) {
			int counter = 1;
			for(Column column : colStruct) {
				if(column.isInsertable()) {
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
%>
						<%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, NORMAL_TYPE)%>
<%
					if(isEnableDebug) {
%>
						query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
<%
					}
					counter++;
				}
			}
			if(isEnableDebug) {
%>
				globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
<%
			}
%>
<%
			if(addBatch) {
%>
			pstmt_<%=cid %>.addBatch();
			nb_line_<%=cid%>++;
<%
				if ( batchMode && !("").equals(batchSize) && !("0").equals(batchSize)) {
%>
				batchSizeCounter_<%=cid%>++;
<%
				}
%>
<%
			}else {
%>
		try {
			insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
			nb_line_<%=cid%>++;
		} catch(java.lang.Exception e) {
			whetherReject_<%=cid%> = true;
<%
				if (("true").equals(dieOnError)) {
%>
		throw(e);
<%
				} else {
					if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
%>
				<%=rejectConnName %> = new <%=rejectConnName %>Struct();
<%
						for(IMetadataColumn column : columnList) {
%>
					<%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
<%
						}
%>
				rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
				<%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
				<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
<%
					} else {
%>
					System.err.print(e.getMessage());
<%
					}
				}
%>
	}
<%			}
%>
<%
		} else if(("UPDATE").equals(dataAction)) {
			int counterCol = 1;
			for(Column column : colStruct) {
				if(column.isUpdatable()) {
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
					%>
					<%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
					<%
					if(isEnableDebug) {
						%>
						query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
						<%
					}
					counterCol++;
				}
			}
	
			for(Column column : colStruct) {
				if(column.isUpdateKey()) {
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
					String dbType = column.getColumn().getType();
					%>
					
					<% 
					//#############for feature:2880 and 6980
					if(whereSupportNull && column.getColumn().isNullable()) { %>
						<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
					<%  
					if(isEnableDebug) {
						%>
						query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
						<%
					}
						counterCol++;
					   }
					 //#############					  
					%>  
					<%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
					<%
					if(isEnableDebug) {
						%>
						query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
						<%
					}
					counterCol++;
				}
			}
			if(isEnableDebug) {
				%>
				globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
				<%
			}
			%>
			
			<%
			if(addBatch) {
			%>
			pstmt_<%=cid %>.addBatch();
			nb_line_<%=cid%>++;
			<%
				if ( batchMode && !("").equals(batchSize) && !("0").equals(batchSize)) {
			%>
			batchSizeCounter_<%=cid%>++;
			<%
				}
			}else {
			%>
			try {
				updatedCount_<%=cid%> = updatedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
				nb_line_<%=cid%>++;
			} catch(java.lang.Exception e) {
				whetherReject_<%=cid%> = true;
				<%
				if (("true").equals(dieOnError)) {
					%>
					throw(e);
					<%
				} else {
					if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
						%>
						<%=rejectConnName %> = new <%=rejectConnName %>Struct();
						<%
						for(IMetadataColumn column : columnList) {
							%>
							<%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
							<%
						}
						%>
						rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
						<%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
						<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
						<%
					} else {
						%>
						System.err.print(e.getMessage());
						<%
					}
				} 
				%>
			}
		  <%}%>
			<%
		} else if (("INSERT_OR_UPDATE").equals(dataAction)) {
			int columnIndex = 1;
			for(Column column : colStruct) {
				if(column.isUpdateKey()) {
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
					String dbType = column.getColumn().getType();
					%>
					<% 
					//#############for feature:2880 and 6980
					if(whereSupportNull && column.getColumn().isNullable()) { %>
						<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, columnIndex, incomingConnName, cid, NORMAL_TYPE)%>
					<%  
						columnIndex++;
					   }
					 //#############					  
					%>
					<%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, columnIndex, incomingConnName, cid, NORMAL_TYPE)%>
					<%
					columnIndex++;
				}
			}
			%>
	
			java.sql.ResultSet rs_<%=cid%> = pstmt_<%=cid %>.executeQuery();
			int checkCount_<%=cid%> = -1;
			while(rs_<%=cid%>.next()) {
				checkCount_<%=cid%> = rs_<%=cid%>.getInt(1);
			}
			if(checkCount_<%=cid%> > 0) {
				<%
				int counterCol = 1;
				for(Column column : colStruct) {
					if(column.isUpdatable()) {
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
						%>
						<%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
						<%
						if(isEnableDebug) {
							%>
							query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
							<%
						}
						counterCol++;
					}
				}
				for(Column column : colStruct) {
					if(column.isUpdateKey()) {
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
						String dbType = column.getColumn().getType();
						%>
						<% 
						//#############for feature:2880
						if(whereSupportNull && column.getColumn().isNullable()) { %>
							<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
						<%  
							 if(isEnableDebug) {
							%>
							query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
							<%
							} 
							counterCol++;
						   }
						 //#############					  
						%>
						<%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
						<%
						if(isEnableDebug) {
							%>
							query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
							<%
						}
						counterCol++;
					}
				}
				if(isEnableDebug) {
					%>
					globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
					<%
				}
				%>
				try {
					updatedCount_<%=cid%> = updatedCount_<%=cid%> + pstmtUpdate_<%=cid %>.executeUpdate();
				} catch(java.lang.Exception e) {
					whetherReject_<%=cid%> = true;
					<%
					if (("true").equals(dieOnError)) {
						%>
						throw(e);
						<%
					} else {
						if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
							%>
							<%=rejectConnName %> = new <%=rejectConnName %>Struct();
							<%
							for(IMetadataColumn column : columnList) {
								%>
								<%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
								<%
							}
							%>
							rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
							<%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
							<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
							<%
						} else {
							%>
							System.err.print(e.getMessage());
							<%
						}
					} 
					%>
				}
			} else {
				<%
				int counterInsert = 1;
				for(Column columnInsert : colStruct) {
					if(columnInsert.isInsertable()) {
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnInsert.getColumn().getTalendType(), columnInsert.getColumn().isNullable());
						%>
						<%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, columnInsert, counterInsert, incomingConnName, cid, INSERT_TYPE)%>
						<%
						if(isEnableDebug) {
							%>
							query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnInsert, incomingConnName, cid, "query_" ,  counterInsert, "insertSQLSplits_")%>;
							<%
						}
						counterInsert++;
					}
				}
				if(isEnableDebug) {
					%>
					globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
					<%
				}
				%>
				try {
					insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate();
				} catch(java.lang.Exception e) {
					whetherReject_<%=cid%> = true;
					<%
					if (("true").equals(dieOnError)) {
						%>
						throw(e);
						<%
					} else {
						if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
							%>
							<%=rejectConnName %> = new <%=rejectConnName %>Struct();
							<%
							for(IMetadataColumn column : columnList) {
								%>
								<%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
								<%
							}
							%>
							rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
							<%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
							<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
							<%
						} else {
							%>
							System.err.print(e.getMessage());
							<%
						}
					} 
					%>
				}
			}
			nb_line_<%=cid%>++;
			<%
		} else if (("UPDATE_OR_INSERT").equals(dataAction)) {
			%>
			int updateFlag_<%=cid%> = 0;
			<%
			int counterColUpdate = 1;
			for(Column columnUpdate : colStruct) {
				if(columnUpdate.isUpdatable()) {
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnUpdate.getColumn().getTalendType(), columnUpdate.getColumn().isNullable());
					%>
					<%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE)%>
					<%
					if(isEnableDebug) {
						%>
						query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_")%>;
						<%
					}
					counterColUpdate++;
				}
			}
	
			for(Column columnUpdate : colStruct) {
				if(columnUpdate.isUpdateKey()) {
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnUpdate.getColumn().getTalendType(), columnUpdate.getColumn().isNullable());
					String dbType = columnUpdate.getColumn().getType();
					%>
					<% 
					//#############for feature:2880 and 6980
					if(whereSupportNull && columnUpdate.getColumn().isNullable()) { %>
						<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE)%>
					<%  
						if(isEnableDebug) {
							%>
							query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_", "(("+incomingConnName+"."+columnUpdate.getName()+"==null)?1:0)")%>;
							<%
							}
						counterColUpdate++;
					   }
					 //#############					  
					%>
					<%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE)%>
					<%
					if(isEnableDebug) {
						%>
						query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_")%>;
						<%
					}
					counterColUpdate++;
				}
			}
			if(isEnableDebug) {
				%>
				globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
				<%
			}
			%>
		
			try {
				updateFlag_<%=cid%>=pstmtUpdate_<%=cid %>.executeUpdate();
				updatedCount_<%=cid%> = updatedCount_<%=cid%> + updateFlag_<%=cid%>;
			if(updateFlag_<%=cid%> == 0) {
				<%
				if(isEnableDebug) {
				%>
				query_<%=cid%> = new StringBuffer("");
				<%
				}
				int counter = 1;
				for(Column column : colStruct) {
					if(column.isInsertable()) {
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
						%>
						<%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, INSERT_TYPE)%>
						<%
						if(isEnableDebug) {
							%>
							query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
							<%
						}
						counter++;
					}
				}
				if(isEnableDebug) {
					%>
					globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
					<%
				}
				%>
					insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate(); 
			}
				} catch(java.lang.Exception e) {
					whetherReject_<%=cid%> = true;
					<%
					if (("true").equals(dieOnError)) {
						%>
						throw(e);
						<%
					} else {
						if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
							%>
							<%=rejectConnName %> = new <%=rejectConnName %>Struct();
							<%
							for(IMetadataColumn column : columnList) {
								%>
								<%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
								<%
							}
							%>
							rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
							<%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
							<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
							<%
						} else {
							%>
							System.err.print(e.getMessage());
							<%
						}
					} 
					%>
				}
			nb_line_<%=cid%>++;
			<%
		} else if (("DELETE").equals(dataAction)) {
			int keyCounter = 1;
			for(Column column : colStruct) {
				if(column.isDeleteKey()) {
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
					String dbType = column.getColumn().getType();
					%>
					<% 
					//#############for feature:2880 and 6980
					if(whereSupportNull && column.getColumn().isNullable()) { %>
						<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, keyCounter, incomingConnName, cid, NORMAL_TYPE)%>
					<%  
						if(isEnableDebug) {
							%>
							query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , keyCounter, "deleteSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
							<%
							}
						 keyCounter++;
					   }
					 //#############					  
					%>
					<%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, keyCounter, incomingConnName, cid, NORMAL_TYPE)%>
					<%
					if(isEnableDebug) {
						%>
						query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , keyCounter, "deleteSQLSplits_")%>;
						<%
					}
					keyCounter++;
				}
			}
			if(isEnableDebug) {
				%>
				globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
				<%
			}
			%>
			<%
			if(addBatch) {
			%>
			pstmt_<%=cid %>.addBatch();
			<%if ( batchMode && !("").equals(batchSize) && !("0").equals(batchSize)) {
			%>
			batchSizeCounter_<%=cid%>++;
			<%
			}%>
			<%
			}else {
			%>
			try {
				deletedCount_<%=cid%> = deletedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
			} catch(java.lang.Exception e) {
				whetherReject_<%=cid%> = true;
				<%
				if (("true").equals(dieOnError)) {
					%>
					throw(e);
					<%
				} else {
					if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
						%>
						<%=rejectConnName %> = new <%=rejectConnName %>Struct();
						<%
						for(IMetadataColumn column : columnList) {
							%>
							<%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
							<%
						}
						%>
						rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
						<%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
						<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
						<%
					} else {
						%>
						System.err.print(e.getMessage());
						<%
					}
				} 
				%>
			}
			<%}%>
			nb_line_<%=cid%>++;
		<%
		}else if ("COPY".equals(dataAction)) { 
			int counter = 1;
			for(int i = 0; i < columnList.size(); i++) {
			IMetadataColumn column = columnList.get(i); 
			//if(column.isInsertable()) {
			%>
					
					
					<%
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
					String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
					if(JavaTypesManager.isJavaPrimitiveType( column.getTalendType(), column.isNullable())){
			   		%>
			   			stmtBuilder_<%=cid%>.append("|");
						stmtBuilder_<%=cid%>.append(String.valueOf(<%=inConn.getName() %>.<%=column.getLabel() %>));
						stmtBuilder_<%=cid%>.append("|"); 
			   		<%
			   		}else { 
			   		%>
			   			if(<%=inConn.getName() %>.<%=column.getLabel() %> == null){
			   				stmtBuilder_<%=cid%>.append("");
			   			}else{
							stmtBuilder_<%=cid%>.append("|");
									<%
									if(javaType == JavaTypesManager.STRING ){
										%>
										stmtBuilder_<%=cid%>.append(<%=inConn.getName() %>.<%=column.getLabel() %>.replaceAll("\\|","\\\\|"));
										<%
									}else if(javaType == JavaTypesManager.DATE && pattern != null){
										%>
										stmtBuilder_<%=cid%>.append(FormatterUtils.format_Date(<%=inConn.getName() %>.<%=column.getLabel() %>, <%= pattern %>));
										<%
									}else if(javaType == JavaTypesManager.BYTE_ARRAY){
										%>
										stmtBuilder_<%=cid%>.append(java.nio.charset.Charset.defaultCharset().decode(java.nio.ByteBuffer.wrap(<%=inConn.getName() %>.<%=column.getLabel() %>)).toString());
										<%
									} else if(JavaTypesManager.isNumberType(javaType, column.isNullable())) { 
									%>
											<% if(javaType == JavaTypesManager.BIGDECIMAL) {%>
											stmtBuilder_<%=cid%>.append(FormatterUtils.format_Number(String.valueOf(<%=column.getPrecision() == null? inConn.getName() + "." + column.getLabel() : inConn.getName() + "." + column.getLabel() + ".setScale(" + column.getPrecision() + ", java.math.RoundingMode.HALF_UP)" %>), null, '.'));
											<% } else if (javaType == JavaTypesManager.DOUBLE || javaType == JavaTypesManager.FLOAT) {%>
												if (<%=inConn.getName() %>.<%=column.getLabel() %> != null) {
													BigDecimal decimal_<%=cid%> = new BigDecimal(<%=inConn.getName() %>.<%=column.getLabel() %>);
													stmtBuilder_<%=cid%>.append(FormatterUtils.format_Number(String.valueOf(<%=column.getPrecision() == null? inConn.getName() + "." + column.getLabel() : "decimal_"+cid+".setScale(" + column.getPrecision() + ", java.math.RoundingMode.HALF_UP)" %>), null, '.'));
												}
											<% } else { %>
											stmtBuilder_<%=cid%>.append(FormatterUtils.format_Number(String.valueOf(<%=inConn.getName() %>.<%=column.getLabel() %>), null, '.'));
											<% } %>
									<%
										} else if (javaType == JavaTypesManager.BIGDECIMAL) {
										%>
										stmtBuilder_<%=cid%>.append(String.valueOf(<%=column.getPrecision() == null? inConn.getName() + "." + column.getLabel() : inConn.getName() + "." + column.getLabel() + ".setScale(" + column.getPrecision() + ", java.math.RoundingMode.HALF_UP)" %>));
										<%
									}else{
										%>
										stmtBuilder_<%=cid%>.append(String.valueOf(<%=inConn.getName() %>.<%=column.getLabel() %>));
										<%
									}
									
									%>
									stmtBuilder_<%=cid%>.append("|");
								}
								<%
							}
					counter++; 
					%>
					stmtBuilder_<%=cid%>.append("<%= i == columnList.size() - 1 ? "\\n" : ";"%>");
			<%
			  //}
			}
			%>
			<%
			if(rejectConnName == null ) {%>
			
			nb_line_<%=cid%>++;
<%
			if ( batchMode && !("").equals(batchSize) && !("0").equals(batchSize)) {
%>
				batchSizeCounter_<%=cid%>++;
<%
			}
%>
<%
			}
			
		}
		
		if(outgoingConns != null && outgoingConns.size() > 0) {
			%>
			if(!whetherReject_<%=cid%>) {
				<%
				for(IConnection outgoingConn : outgoingConns) {
					if(rejectConnName == null || (rejectConnName != null && !outgoingConn.getName().equals(rejectConnName))) {
						if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
							%>
							<%=outgoingConn.getName()%> = new <%=outgoingConn.getName()%>Struct();
							<%
							for(IMetadataColumn column : columnList) {
								%>
								<%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
								<%
							}
						}
					}
				}
			%>
			}
			<%
		}   
		
				//////////batch execute by batch size///////
		if (batchMode) {
			if(!("").equals(batchSize) && !("0").equals(batchSize)) {
			%>
				if ( batchSize_<%=cid%> <= batchSizeCounter_<%=cid%>) {
				<%if ( (rejectConnName==null) && (("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)) ||("COPY".equals(dataAction)) ) {
				%>
				try {
						<%
						if (!"COPY".equals(dataAction)) {
						%>
						pstmt_<%=cid %>.executeBatch();
						<%
						} else {
						%>
						java.io.ByteArrayInputStream bais_<%=cid%> = new ByteArrayInputStream(stmtBuilder_<%=cid%>.toString().getBytes());
						<%if("VERTICA_7_0_X".equals(db_version) || "VERTICA_6_1_X".equals(db_version) || "VERTICA_6_0".equals(db_version) || "VERTICA_5_1".equals(db_version)){%>
						com.vertica.jdbc.VerticaCopyStream vcs_<%=cid%> = new com.vertica.jdbc.VerticaCopyStream((com.vertica.jdbc.VerticaConnection)conn_<%=cid%>,template_<%=cid%>);
						vcs_<%=cid%>.start();
						vcs_<%=cid%>.addStream(bais_<%=cid%>);
						vcs_<%=cid%>.execute();
						vcs_<%=cid%>.finish();
						<%}else{%>
						((com.vertica.PGStatement)stmt_<%=cid%>).executeCopyIn(template_<%=cid%>, bais_<%=cid%>);
						<%}%>
						stmtBuilder_<%=cid%> = null;
						if (bais_<%=cid%> != null) {
							bais_<%=cid%>.close();
							bais_<%=cid%> = null;
						}
						stmtBuilder_<%=cid%> = new StringBuilder();
						<%
						}
						%>
						<%
						if (("INSERT").equals(dataAction)) {
						%>
							insertedCount_<%=cid%> += pstmt_<%=cid %>. getUpdateCount();
						<%
						}else if (("UPDATE").equals(dataAction)) {
						%>
							updatedCount_<%=cid%> += pstmt_<%=cid %>. getUpdateCount();
						<%
						}else if (("DELETE").equals(dataAction)) {
						%>
							deletedCount_<%=cid%> += pstmt_<%=cid %>. getUpdateCount();
						<%
						}else if (("COPY").equals(dataAction)) {
							if("VERTICA_7_0_X".equals(db_version) || "VERTICA_6_1_X".equals(db_version) || "VERTICA_6_0".equals(db_version) || "VERTICA_5_1".equals(db_version)){
						%>
								copiedCount_<%=cid%> += vcs_<%=cid%>.getRowCount();
						<%
							}else{
						%>
								copiedCount_<%=cid%> += stmt_<%=cid %>. getUpdateCount();
						<%
							}
						}
						%>
						batchSizeCounter_<%=cid%> = 0; 											
				}catch (java.sql.SQLException e){
					<%if(("true").equals(dieOnError)) {
					%>
						throw(e);
					<%
					}else {
					%>
					System.err.println(e.getMessage());
					<%
					}%>
				}
				<%
				}
				%>
				}
			<%
			}
		}
		////////////commit every////////////
		if(!useExistingConnection && (!("VERTICA_7_0_X".equals(db_version) || "VERTICA_6_1_X".equals(db_version) || "VERTICA_6_0".equals(db_version) || "VERTICA_5_1".equals(db_version)) || !"COPY".equals(dataAction))) {
			if(manualCommit) {
				%>
				commitCounter_<%=cid%>++;
				if(commitEvery_<%=cid%> <= commitCounter_<%=cid%>) {
				
				<%if ((rejectConnName==null && !useExistingConnection) && (("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)) ||("COPY".equals(dataAction)) ) {
				%>
				try {
					<%
					if (!"COPY".equals(dataAction)) {
						if (batchMode) {//manual commit and batch mode
					%>
							boolean isCountResult_<%=cid%> = false;
							if(batchSizeCounter_<%=cid%> > 0){
								pstmt_<%=cid %>.executeBatch();
								isCountResult_<%=cid%> = true;
								batchSizeCounter_<%=cid%> = 0;
							}
					<%
						}else{//manual commit
					%>
							pstmt_<%=cid %>.executeBatch(); 
					<%
						}
						if (batchMode){
					%>
						if(isCountResult_<%=cid%>){
					<%
						}
						if (("INSERT").equals(dataAction)) {
					%>
						insertedCount_<%=cid%> += pstmt_<%=cid %>.getUpdateCount();
					<%
						}else if (("UPDATE").equals(dataAction)) {
					%>
						updatedCount_<%=cid%> += pstmt_<%=cid %>.getUpdateCount();
					<%
						}else if (("DELETE").equals(dataAction)) {
					%>
						deletedCount_<%=cid%> += pstmt_<%=cid %>.getUpdateCount();
					<%
						}
						if (batchMode){
					%>
						}
					<%
						}
					} else {
					%>
						if (stmtBuilder_<%=cid%> != null && stmtBuilder_<%=cid%>.length() != 0 ) { // stmtBuilder_<%=cid%> start
							java.io.ByteArrayInputStream bais_<%=cid%> = new ByteArrayInputStream(stmtBuilder_<%=cid%>.toString().getBytes());
							((com.vertica.PGStatement)stmt_<%=cid%>).executeCopyIn(template_<%=cid%>, bais_<%=cid%>);
							stmtBuilder_<%=cid%> = null;
							if (bais_<%=cid%> != null) {
								bais_<%=cid%>.close();
								bais_<%=cid%> = null;
							}
							stmtBuilder_<%=cid%> = new StringBuilder();
							copiedCount_<%=cid%> += stmt_<%=cid %>.getUpdateCount();
						} // stmtBuilder_<%=cid %> end
					<%
					}
					%>
				}catch (java.sql.SQLException e){
					<%if(("true").equals(dieOnError)) {
					%>
						throw(e);
					<%
					}else {
					%>
						System.out.println(e.getMessage());
					<%
					}%>
				
				}
				<%
				}
				%>
	   				conn_<%=cid%>.commit();
					commitCounter_<%=cid%>=0;
				}
				<%
			}
		}
	}
	%>
