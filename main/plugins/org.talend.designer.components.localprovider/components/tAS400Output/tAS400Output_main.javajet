<%@ jet 
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.MappingTypeRetriever
    org.talend.core.model.metadata.MetadataTalendType	
    org.talend.core.model.process.IConnectionCategory	
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.HashMap
"
skeleton="../templates/db_output_bulk.skeleton"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();	
	String cid = node.getUniqueName();	
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	String table = ElementParameterParser.getValue(node,"__TABLE__");
	String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
	String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
	List<Map<String, String>> addCols =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__");

    boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));
    
    List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");	
	
    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
    boolean useBatchSize = ("true").equals(ElementParameterParser.getValue(node,"__USE_BATCH_SIZE__"));
    String batchSize =ElementParameterParser.getValue(node, "__BATCH_SIZE__");
    boolean useExistingConnection = "true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
    boolean isEnableDebug = ("true").equals(ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__"));
    
	//feature:2880
    getManager(dbmsId, cid, node);
    boolean whereSupportNull = ElementParameterParser.getValue(node, "__SUPPORT_NULL_WHERE__").equals("true");
	
	String incomingConnName = null;
	List<IMetadataColumn> columnList = getColumnList(node);
	
	List< ? extends IConnection> conns = node.getIncomingConnections();
	if(conns!=null && conns.size()>0){
		IConnection conn = conns.get(0);
		incomingConnName = conn.getName();
	}
		
    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }
    List<IMetadataColumn> rejectColumnList = null;
    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
    if(metadataTable != null) {
        rejectColumnList = metadataTable.getListColumns();      
    }
    
    List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
    for(IConnection conn : outgoingConns) {
        if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
            %>        
            <%=conn.getName() %> = null;            
            <%      
        }
    }
	
	Manager manager = null;
	boolean isDynamic = false;
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
		IMetadataTable metadata = metadatas.get(0);
		isDynamic = metadata.isDynamicSchema(); 
	}
	
	List<Column> stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
	isDynamic = isDynamic && !getManager(dbmsId, cid).isDynamicColumnReplaced();
	
    ////////////////////////////////////////////////////////////
    List<Column> colStruct = new ArrayList<Column>();
    for(Column colStmt : stmtStructure) {
    	if(!colStmt.isReplaced() && !colStmt.isAddCol() && !colStmt.isDynamic()) {
    		colStruct.add(colStmt);
    	}
    }
	if(isEnableDebug) {
%>
		query_<%=cid%> = new StringBuffer("");
<%
	}
	
	if(isDynamic) {
	%>
		if(nb_line_<%=cid%>==0) {
	<%
	
	if(columnList != null && columnList.size() > 0) {    
   %>
   <%@ include file="../templates/_tableActionForOutput.javajet"%>
   <%
    Map<String, StringBuilder> actionSQLMap = getManager(dbmsId, cid).createProcessSQL(stmtStructure);
    StringBuilder insertColName = actionSQLMap.get(INSERT_COLUMN_NAME);   
    StringBuilder insertValueStmt = actionSQLMap.get(INSERT_VALUE_STMT);    
    StringBuilder updateSetStmt = actionSQLMap.get(UPDATE_SET_STMT);    
    StringBuilder updateWhereStmt = actionSQLMap.get(UPDATE_WHERE_STMT);
    StringBuilder deleteWhereStmt = actionSQLMap.get(DELETE_WHERE_STMT);

	if(("INSERT").equals(dataAction)) {
		List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
			if(conns_dynamic!=null && conns_dynamic.size()>0){
				IConnection conn = conns_dynamic.get(0);
				if(!("".equals(insertColName.toString()))) {
%>
					String insert_<%=cid%> = "INSERT INTO " + tableName_<%=cid%> + " (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES (<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
<%				} else {
%>
					String insert_<%=cid%> = "INSERT INTO " + tableName_<%=cid%> + " ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES ("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
<%
				}
			}
	    %>
	    pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>, java.sql.Statement.RETURN_GENERATED_KEYS);
	    <%
	} else if (("UPDATE").equals(dataAction)) {
		List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
		if(conns_dynamic!=null && conns_dynamic.size()>0){
			IConnection conn = conns_dynamic.get(0);
			if(!("".equals(updateSetStmt.toString()))) {
%>
				String update_<%=cid%> = "UPDATE " + tableName_<%=cid%> + " SET <%=updateSetStmt.toString()%>, "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%			} else {
%>
				String update_<%=cid%> = "UPDATE " + tableName_<%=cid%> + " SET "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%
			}
		}
	    %>
	    pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
	    <%		
	} else if (("INSERT_OR_UPDATE").equals(dataAction)) {
		List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
			if(conns_dynamic!=null && conns_dynamic.size()>0){
				IConnection conn = conns_dynamic.get(0);
				if(!("".equals(insertColName.toString()))) {
%>
					String insert_<%=cid%> = "INSERT INTO " + tableName_<%=cid%> + " (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES (<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
<%				} else {
%>
					String insert_<%=cid%> = "INSERT INTO " + tableName_<%=cid%> + " ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES ("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
<%
				}
				if(!("".equals(updateSetStmt.toString()))) {
%>
					String update_<%=cid%> = "UPDATE " + tableName_<%=cid%> + " SET <%=updateSetStmt.toString()%>, "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%				} else {
%>
					String update_<%=cid%> = "UPDATE " + tableName_<%=cid%> + " SET "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%
				}
			}
	    %>
	    pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("SELECT COUNT(1) FROM " + <%=table%> + " WHERE <%=updateWhereStmt.toString()%>");
	    pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
	    pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
	    <%
	} else if (("UPDATE_OR_INSERT").equals(dataAction)) {
		List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
			if(conns_dynamic!=null && conns_dynamic.size()>0){
				IConnection conn = conns_dynamic.get(0);
				if(!("".equals(insertColName.toString()))) {
%>
					String insert_<%=cid%> = "INSERT INTO " + tableName_<%=cid%> + " (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES (<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
<%				} else {
%>
					String insert_<%=cid%> = "INSERT INTO " + tableName_<%=cid%> + " ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES ("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
<%
				}
				if(!("".equals(updateSetStmt.toString()))) {
%>
					String update_<%=cid%> = "UPDATE " + tableName_<%=cid%> + " SET <%=updateSetStmt.toString()%>, "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%				} else {
%>
					String update_<%=cid%> = "UPDATE " + tableName_<%=cid%> + " SET "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%
				}
			}
			
	    %>
	    pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
	    pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);		
	    <%			
	} else if (("DELETE").equals(dataAction)) {
	    %>
	    String delete_<%=cid%> = "DELETE FROM " + <%=table%> + " WHERE <%=deleteWhereStmt.toString()%>";
	    pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(delete_<%=cid%>);
	    <%		
	}
    if(isEnableDebug) {
        %>
        StringBuffer query_<%=cid%> = null;
       	<%@ include file="../templates/DB/Output/splitSQLForAllDBInBegin.javajet" %>
        <%
    }    
}
%>
	}
<%
} //end isDynamic
	
	boolean isParallelize ="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__PARALLELIZE__"));
	String useCommitControl = ElementParameterParser.getValue(node,"__USE_COMMIT_CONTROL__");
	if (isParallelize) { // bug0014422
		String tAsyncIn_cid = "";
		if(conns!=null && conns.size() > 0) {
			tAsyncIn_cid = conns.get(0).getSource().getUniqueName();
		}
		if(!useExistingConnection) {
			if(("true").equals(useCommitControl)) {// if use commit control
	    		if(!("").equals(commitEvery)&&!("0").equals(commitEvery)) {
%>
					commitEvery_<%=cid%> = buffersSize_<%=tAsyncIn_cid%>;
<%
	    		}
	    	}
    	}
		    if (useBatchSize && (("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction))) {
		    	if(!("").equals(batchSize)&&!("0").equals(batchSize)) {
%>
					batchSize_<%=cid%> = buffersSize_<%=tAsyncIn_cid%>;
<%
		    	}
    		}
    
	}
	
    if(incomingConnName != null && columnList != null) {
        %>
        whetherReject_<%=cid%> = false;
        <%	
        if(("INSERT").equals(dataAction)) {
            int counter = 1;
            for(Column column : colStruct) {
                if(column.isInsertable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
                        <%
                    }                    
                    counter++;                        
                }
            }
			if(isDynamic) {
				Column dynamicColumn = getColumn(getDynamicColumn());
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
				if("Dynamic".equals(typeToGenerate)) {
				%>
					DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmt_<%=cid%>, <%=counter-1%>, "<%=dbmsId%>");
				<%
				}
			}
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
            }            
    		%>
    		<%if (rejectConnName == null && useBatchSize) { 
    		%>
    		pstmt_<%=cid %>.addBatch();
    		nb_line_<%=cid%>++;    		 
			
    		  <%if ( !("").equals(batchSize) && !("0").equals(batchSize)) {
    		  %>
    		  batchSizeCounter_<%=cid%>++;
    		  <%
    		  }%>    		
    		<%
    		}else {    		
    		%>
            try {
                nb_line_<%=cid%>++;
                insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
            } catch(java.sql.SQLException e) {
                whetherReject_<%=cid%> = true;
                <%
                if (("true").equals(dieOnError)) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                        <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                        <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                        <%
                    } else {
                        %>
                         System.err.println(e.getMessage() + " SQLSTATE=[" + e.getSQLState() + "] " + "CODE[" + e.getErrorCode() + "]");
                        <%
                    }
                } 
                %>
            }
            <%
	    }
    	} else if(("UPDATE").equals(dataAction)) {
    	    int counterCol = 1;
            for(Column column : colStruct) {
                if(column.isUpdatable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                        <%
                    }                    
                    counterCol++;                   
                }
            }
			if(isDynamic) {
				Column dynamicColumn = getColumn(getDynamicColumn());
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
				if("Dynamic".equals(typeToGenerate)) {
				%>
				
					int count_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmt_<%=cid%>, <%=counterCol-1%>, "<%=dbmsId%>");
				<%
				}
			}
    
            for(Column column : colStruct) {
                if(column.isUpdateKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    //#############for feature:2880 and 6980
                    if(whereSupportNull && column.getColumn().isNullable()) { %>
                    	<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
                    <%  
					if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
                        <%
                    }
                    	counterCol++;
                       }
                     //#############                      
                    %>  
                    
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, NORMAL_TYPE, " + count_")%>
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                        <%
                    }                    
                    counterCol++;
                }
            }
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
            }            
    		%>
    		<%if(rejectConnName == null && useBatchSize) {
    		%>
    		pstmt_<%=cid %>.addBatch();
    		nb_line_<%=cid%>++;
    		<%if (!("").equals(batchSize) && !("0").equals(batchSize)) {
    		%>
    		batchSizeCounter_<%=cid%>++;
    		<%
    		}%>    		    		
    		<%
    		}else {
    		%>
             try {
                nb_line_<%=cid%>++;
                updatedCount_<%=cid%> = updatedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
            } catch(java.sql.SQLException e) {
                whetherReject_<%=cid%> = true;
                <%
                if (("true").equals(dieOnError)) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                        <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                        <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                        <%
                    } else {
                        %>
                         System.err.println(e.getMessage() + " SQLSTATE=[" + e.getSQLState() + "] " + "CODE[" + e.getErrorCode() + "]");
                        <%
                    }
                } 
                %>
            }
            <%
	    }
    	} else if (("INSERT_OR_UPDATE").equals(dataAction)) {
    		int columnIndex = 1;
            for(Column column : colStruct) {
                if(column.isUpdateKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    //#############for feature:2880 and 6980
                    if(whereSupportNull && column.getColumn().isNullable()) { %>
                    	<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, columnIndex, incomingConnName, cid, NORMAL_TYPE)%>
                    <%  
                    	columnIndex++;
                       }
                     //#############                      
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, columnIndex, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
                    columnIndex++;
                }
            }
    		%>
    		java.sql.ResultSet rs_<%=cid%> = pstmt_<%=cid %>.executeQuery();
    		int checkCount_<%=cid%> = -1;
    		while(rs_<%=cid%>.next()) {
    			checkCount_<%=cid%> = rs_<%=cid%>.getInt(1);
    		}
    		if(checkCount_<%=cid%> > 0) {
    			try {
    			<%
    			int counterCol = 1;
                for(Column column : colStruct) {
                    if(column.isUpdatable()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                        %>
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
                        <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                            <%
                        }                        
                        counterCol++;
                    }
                }
				if(isDynamic) {
					Column dynamicColumn = getColumn(getDynamicColumn());
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
					if("Dynamic".equals(typeToGenerate)) {
					%>
					
						int count_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtUpdate_<%=cid%>, <%=counterCol-1%>, "<%=dbmsId%>");
					<%
					}
				}
                for(Column column : colStruct) {
                    if(column.isUpdateKey()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
	                    //#############for feature:2880
	                    if(whereSupportNull && column.getColumn().isNullable()) { %>
	                    	<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
	                    <%  
		                     if(isEnableDebug) {
	                        %>
	                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
	                        <%
	                    	} 
	                    	counterCol++;
	                       }
	                     //#############                      
	                    %>
	                    
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, UPDATE_TYPE, " + count_")%>
                        <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                            <%
                        }                        
                        counterCol++;                   
                    }
                }
                if(isEnableDebug) {
                    %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                    <%
                }                
    			%>
        			updatedCount_<%=cid%> = updatedCount_<%=cid%> + pstmtUpdate_<%=cid %>.executeUpdate();
                } catch(java.sql.SQLException e) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (("true").equals(dieOnError)) {
                        %>
                        throw(e);
                        <%
                    } else {
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                            %>
                            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                            %>
                            rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                            <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                            <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                            <%
                        } else {
                            %>
                             System.err.println(e.getMessage() + " SQLSTATE=[" + e.getSQLState() + "] " + "CODE[" + e.getErrorCode() + "]");
                            <%
                        }
                    } 
                    %>
                }
    		} else {
    			try {
    			<%
    			int counterInsert = 1;
                for(Column columnInsert : colStruct) {
                    if(columnInsert.isInsertable()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnInsert.getColumn().getTalendType(), columnInsert.getColumn().isNullable());
                        %>
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, columnInsert, counterInsert, incomingConnName, cid, INSERT_TYPE)%>
                        <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnInsert, incomingConnName, cid, "query_" ,  counterInsert, "insertSQLSplits_")%>;
                            <%
                        }                        
                        counterInsert++;
                    }
                }
				if(isDynamic) {
					Column dynamicColumn = getColumn(getDynamicColumn());
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
					if("Dynamic".equals(typeToGenerate)) {
					%>
						DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtInsert_<%=cid%>, <%=counterInsert-1%>, "<%=dbmsId%>");
					<%
					}
				}
                if(isEnableDebug) {
                    %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                    <%
                }                
    			%>
                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate();
                } catch(java.sql.SQLException e) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (("true").equals(dieOnError)) {
                        %>
                        throw(e);
                        <%
                    } else {
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                            %>
                            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                            %>
                            rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                            <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                            <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                            <%
                        } else {
                            %>
                             System.err.println(e.getMessage() + " SQLSTATE=[" + e.getSQLState() + "] " + "CODE[" + e.getErrorCode() + "]");
                            <%
                        }
                    } 
                    %>
                }
    		}
    		nb_line_<%=cid%>++;
    
    		<%
    	} else if (("UPDATE_OR_INSERT").equals(dataAction)) {
    	    %>
    	    int updateFlag_<%=cid%>=0;
            try {
    	    <%
    		int counterColUpdate = 1;
            for(Column columnUpdate : colStruct) {
                if(columnUpdate.isUpdatable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnUpdate.getColumn().getTalendType(), columnUpdate.getColumn().isNullable());
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE)%>
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_")%>;
                        <%
                    }                    
                    counterColUpdate++;
                }
            }
			if(isDynamic) {
				Column dynamicColumn = getColumn(getDynamicColumn());
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
				if("Dynamic".equals(typeToGenerate)) {
				%>
				
					int count_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtUpdate_<%=cid%>, <%=counterColUpdate-1%>, "<%=dbmsId%>");
				<%
				}
			}
    
            for(Column columnUpdate : colStruct) {
                if(columnUpdate.isUpdateKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnUpdate.getColumn().getTalendType(), columnUpdate.getColumn().isNullable());
                    //#############for feature:2880 and 6980
                    if(whereSupportNull && columnUpdate.getColumn().isNullable()) { %>
                    	<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE)%>
                    <%  
	                    if(isEnableDebug) {
	                        %>
	                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_", "(("+incomingConnName+"."+columnUpdate.getName()+"==null)?1:0)")%>;
	                        <%
	                    	}
                    	counterColUpdate++;
                       }
                     //#############                      
                    %>
                    
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE, " + count_")%>
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_")%>;
                        <%
                    }                    
                    counterColUpdate++;
                }
            }
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
            }            
    		%>	
                updateFlag_<%=cid%>=pstmtUpdate_<%=cid %>.executeUpdate();
                updatedCount_<%=cid%> = updatedCount_<%=cid%>+updateFlag_<%=cid%>;
            } catch(java.sql.SQLException e) {
                whetherReject_<%=cid%> = true;
                <%
                if (("true").equals(dieOnError)) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                        <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                        <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                        <%
                    } else {
                        %>
                         System.err.println(e.getMessage() + " SQLSTATE=[" + e.getSQLState() + "] " + "CODE[" + e.getErrorCode() + "]");
                        <%
                    }
                } 
                %>
            }
            
            if(updateFlag_<%=cid%> == 0) {
            	try {
				<%
            	if(isEnableDebug) {
            	%>
				query_<%=cid%> = new StringBuffer("");
        		<%
        		}
        		int counter = 1;
                for(Column column : colStruct) {
                    if(column.isInsertable()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                        %>
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, INSERT_TYPE)%>
                        <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
                            <%
                        }                        
                        counter++;
                    }
                }
				if(isDynamic) {
					Column dynamicColumn = getColumn(getDynamicColumn());
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
					if("Dynamic".equals(typeToGenerate)) {
					%>
						DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtInsert_<%=cid%>, <%=counter-1%>, "<%=dbmsId%>");
					<%
					}
				}
                if(isEnableDebug) {
                    %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                    <%
                }                
        		%>
                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate();
                } catch(java.sql.SQLException e) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (("true").equals(dieOnError)) {
                        %>
                        throw(e);
                        <%
                    } else {
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                            %>
                            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                            %>
                            rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                            <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                            <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                            <%
                        } else {
                            %>
                             System.err.println(e.getMessage() + " SQLSTATE=[" + e.getSQLState() + "] " + "CODE[" + e.getErrorCode() + "]");
                            <%
                        }
                    } 
                    %>
                }
            } 
            nb_line_<%=cid%>++;
            <%    	
    	} else if (("DELETE").equals(dataAction)) {
    	    int keyCounter = 1;
            for(Column column : colStruct) {
                if(column.isDeleteKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    //#############for feature:2880 and 6980
                    if(whereSupportNull && column.getColumn().isNullable()) { %>
                    	<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, keyCounter, incomingConnName, cid, NORMAL_TYPE)%>
                    <%  
	                    if(isEnableDebug) {
	                        %>
	                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , keyCounter, "deleteSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
	                        <%
	                    	}
                    	 keyCounter++;
                       }
                     //#############                      
                    %>
                    
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, keyCounter, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , keyCounter, "deleteSQLSplits_")%>;
                        <%
                    }                    
                    keyCounter++;
                }
            }
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
            }            
    		%>
    		<%if (rejectConnName == null && useBatchSize) {
    		%>
    		pstmt_<%=cid %>.addBatch();
    		nb_line_<%=cid%>++; 
    		  <%if (!("").equals(batchSize) && !("0").equals(batchSize)) {
    		  %>
    		  batchSizeCounter_<%=cid%>++;
    		  <%
    		  }%>    		
    		<%
    		}else {
    		%>
            try {
                deletedCount_<%=cid%> = deletedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
            } catch(java.sql.SQLException e) {
                whetherReject_<%=cid%> = true;
                <%
                if (("true").equals(dieOnError)) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                        <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                        <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                        <%
                    } else {
                        %>
                         System.err.println(e.getMessage() + " SQLSTATE=[" + e.getSQLState() + "] " + "CODE[" + e.getErrorCode() + "]");
                        <%
                    }
                } 
                %>
            }
            nb_line_<%=cid%>++;
    	<%
    	}
    	}
   	
        if(outgoingConns != null && outgoingConns.size() > 0) {
            %>
            if(!whetherReject_<%=cid%>) {
                <%
                for(IConnection outgoingConn : outgoingConns) {
                    if(rejectConnName == null || (rejectConnName != null && !outgoingConn.getName().equals(rejectConnName))) {
                        if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {                            
                            %>
                            <%=outgoingConn.getName()%> = new <%=outgoingConn.getName()%>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%                  
                            }
                        }
                    }
                }
                %>
            }
            <%
        }	
    	//////////batch execute by batch size///////
    	if (useBatchSize) {
    		if(!("").equals(batchSize) && !("0").equals(batchSize)) {
                if ( rejectConnName==null && (("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction))) {
                %>
    			if ( batchSize_<%=cid%> <= batchSizeCounter_<%=cid%>) {
    			    try {
                        <%
                        if (("INSERT").equals(dataAction)) {
                        %>
                            pstmt_<%=cid %>.executeBatch();
                        <%
                        }else{
                        %>
                            int countSum_<%=cid%> = 0;
                            for(int countEach_<%=cid%>: pstmt_<%=cid %>.executeBatch()) {
                                countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
                            }
                        <%
                            if (("UPDATE").equals(dataAction)) {
                        %>                          
                                updatedCount_<%=cid%> += countSum_<%=cid%>;
                        <%
                            }else if (("DELETE").equals(dataAction)) {
                        %>
                                deletedCount_<%=cid%> += countSum_<%=cid%>;
                        <%
                            }
                        }%>                 
                    }catch (java.sql.BatchUpdateException e_<%=cid%>){
                        <%if(("true").equals(dieOnError)) {
                        %>
                            throw(e_<%=cid%>);
                        <%
                        }else {
                        %>
                            <%
                            if (("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)) {
                            %>                          
                                int countSum_<%=cid%> = 0;
                                for(int countEach_<%=cid%>: e_<%=cid%>.getUpdateCounts()) {
                                    countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
                                }
                            <%
                            }
                            if (("UPDATE").equals(dataAction)) {
                            %>                          
                                updatedCount_<%=cid%> += countSum_<%=cid%>;
                            <%
                            }else if (("DELETE").equals(dataAction)) {
                            %>
                                deletedCount_<%=cid%> += countSum_<%=cid%>;
                            <%
                            }
                            %>
                            System.out.println(e_<%=cid%>.getMessage());
                        <%
                        }
                        %>
                    }                                             
                    <%
                    if (("INSERT").equals(dataAction)) {
                    %>
                        tmp_batchUpdateCount_<%=cid%> = pstmt_<%=cid %>.getUpdateCount();
                        insertedCount_<%=cid%>+= (tmp_batchUpdateCount_<%=cid%> >0 ? tmp_batchUpdateCount_<%=cid%>:0);
                    <%
                    }
                    %> 
                    batchSizeCounter_<%=cid%> = 0;  
				}

	    		<%	
    			}
    		}
    	}
        if(!useExistingConnection) {
            if(("true").equals(useCommitControl)) {
                if(!("").equals(commitEvery) && !("0").equals(commitEvery)) {
                    %>
                    commitCounter_<%=cid%>++;                
                    if(commitEvery_<%=cid%> <= commitCounter_<%=cid%>) {                
	                <%
	                if ((rejectConnName==null && useBatchSize) && (("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)) ) {
	                %>
	                if(batchSizeCounter_<%=cid%> > 0){
    	                try {
                            <%
                            if (("INSERT").equals(dataAction)) {
                            %>
                                pstmt_<%=cid %>.executeBatch();
                            <%
                            }else{
                            %>
                                int countSum_<%=cid%> = 0;
                                for(int countEach_<%=cid%>: pstmt_<%=cid %>.executeBatch()) {
                                    countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
                                }
                            <%
                                if (("UPDATE").equals(dataAction)) {
                            %>                          
                                    updatedCount_<%=cid%> += countSum_<%=cid%>;
                            <%
                                }else if (("DELETE").equals(dataAction)) {
                            %>
                                    deletedCount_<%=cid%> += countSum_<%=cid%>;
                            <%
                                }
                            }%>                 
                        }catch (java.sql.BatchUpdateException e_<%=cid%>){
                            <%if(("true").equals(dieOnError)) {
                            %>
                                throw(e_<%=cid%>);
                            <%
                            }else {
                            %>
                                <%
                                if (("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)) {
                                %>                          
                                    int countSum_<%=cid%> = 0;
                                    for(int countEach_<%=cid%>: e_<%=cid%>.getUpdateCounts()) {
                                        countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
                                    }
                                <%
                                }
                                if (("UPDATE").equals(dataAction)) {
                                %>                          
                                    updatedCount_<%=cid%> += countSum_<%=cid%>;
                                <%
                                }else if (("DELETE").equals(dataAction)) {
                                %>
                                    deletedCount_<%=cid%> += countSum_<%=cid%>;
                                <%
                                }
                                %>
                                System.out.println(e_<%=cid%>.getMessage());
                            <%
                            }
                            %>
                        }            	                              
                        <%
                        if (("INSERT").equals(dataAction)) {
                        %>
                            tmp_batchUpdateCount_<%=cid%> = pstmt_<%=cid %>.getUpdateCount();
                            insertedCount_<%=cid%>+= (tmp_batchUpdateCount_<%=cid%> >0 ? tmp_batchUpdateCount_<%=cid%>:0);
                        <%
                        }
                        %>     
                        batchSizeCounter_<%=cid%> = 0;
                    }
	                <%
	                }%>
                        conn_<%=cid%>.commit();                	
                        commitCounter_<%=cid%>=0;                
                    }	
                    <%
                }
            }
        }
    }
    %>
