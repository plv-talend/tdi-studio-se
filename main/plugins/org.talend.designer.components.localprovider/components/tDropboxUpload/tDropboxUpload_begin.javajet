<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
" 
%>

<%
		CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
		INode node = (INode)codeGenArgument.getArgument();
		String cid = node.getUniqueName();
		
		String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
		String accessToken = ElementParameterParser.getValue(node,"__ACCESS_TOKEN__");
	    String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	    String connectionKey = "\"conn_" + connection+"\"";
		
		String exposeOutput = ElementParameterParser.getValue(node, "__EXPOSE_OUTPUT_STREAM__");
		String filePath = ElementParameterParser.getValue(node, "__FILE_PATH__");
		
	    String mode = "com.dropbox.core.DbxWriteMode.add()";
	    if("true".equals(ElementParameterParser.getValue(node,"__FORCE_MODE__"))){
	    	mode = "com.dropbox.core.DbxWriteMode.force()";
	    }else if("true".equals(ElementParameterParser.getValue(node,"__UPDATE_MODE__"))){
	    	mode = "com.dropbox.core.DbxWriteMode.update("+ElementParameterParser.getValue(node,"__REVISION__")+")";
	    }
%>

<%
	if(!"true".equals(useExistingConn)){
		String clientIdentifier = "\""+cid+"\"";
		String localeName = "\""+java.util.Locale.getDefault().toString()+"\"";
		
		String useProxy = ElementParameterParser.getValue(node,"__USE_PROXY__");
		String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
		String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
		
		if("true".equals(useProxy)){
%>
			com.dropbox.core.DbxRequestConfig <%=cid%>_config = new com.dropbox.core.DbxRequestConfig(<%=clientIdentifier%>, <%=localeName%>
				,new com.dropbox.core.http.StandardHttpRequestor(new java.net.Proxy(java.net.Proxy.Type.HTTP, new java.net.InetSocketAddress(<%=proxyHost%>, <%=proxyPort%>))));
			com.dropbox.core.DbxClient <%=cid%>_client = new com.dropbox.core.DbxClient(<%=cid%>_config, <%=accessToken%>);
<%
		}else{
%>
			com.dropbox.core.DbxRequestConfig <%=cid%>_config = new com.dropbox.core.DbxRequestConfig(<%=clientIdentifier%>, <%=localeName%>);
			com.dropbox.core.DbxClient <%=cid%>_client = new com.dropbox.core.DbxClient(<%=cid%>_config, <%=accessToken%>);
<%
		}
	}else{
%>

		com.dropbox.core.DbxClient <%=cid%>_client = (com.dropbox.core.DbxClient)globalMap.get(<%=connectionKey%>);
<%}%>

<%if("true".equals(exposeOutput)){%>
		com.dropbox.core.DbxClient.Uploader <%=cid%>_uploader = <%=cid%>_client.startUploadFile(<%=filePath%>, <%=mode%>, -1);
		java.io.OutputStream <%=cid%>_uploader_body = <%=cid%>_uploader.getBody();
		java.io.FilterOutputStream <%=cid%>_uploader_output = new java.io.FilterOutputStream(new com.dropbox.core.NoThrowOutputStream(<%=cid%>_uploader_body)){
			public void close(){}
		};
		globalMap.put("<%=cid%>_OUTPUTSTREAM", <%=cid%>_uploader_output);
		try{
<%}%>
			