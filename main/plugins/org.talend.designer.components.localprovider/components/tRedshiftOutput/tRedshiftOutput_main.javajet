<%@ jet 
imports="
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.MappingTypeRetriever
    org.talend.core.model.metadata.MetadataTalendType    
    org.talend.core.model.process.IConnectionCategory    
    java.util.List
    java.util.ArrayList
    java.util.Map
    java.util.HashMap
"
skeleton="../templates/db_output_bulk.skeleton"
%>

<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();    
    String cid = node.getUniqueName();    
    String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
    String tableName = ElementParameterParser.getValue(node,"__TABLE__");
    String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
    List<Map<String, String>> addCols =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__");

    boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));
    
    List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");    
    
    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
    
    String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
    
	boolean isEnableDebug = false;//not support.("true").equals(ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__"));
	 
	boolean extendedInsert = ("true").equals(ElementParameterParser.getValue(node, "__EXTENDINSERT__"));
        
	//to fixed: bug8422
	if((cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))||(!("INSERT").equals(dataAction))){
		extendedInsert = false;
	} 
     
    //feature:2880
    getManager(dbmsId, cid, node);
    boolean whereSupportNull = ElementParameterParser.getValue(node, "__SUPPORT_NULL_WHERE__").equals("true");
	
    
    String incomingConnName = null;
    List<IMetadataColumn> columnList = getColumnList(node);
    
    List< ? extends IConnection> conns = node.getIncomingConnections();
    if(conns!=null && conns.size()>0){
        IConnection conn = conns.get(0);
        incomingConnName = conn.getName();
    }
        
    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }
    List<IMetadataColumn> rejectColumnList = null;
    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
    if(metadataTable != null) {
        rejectColumnList = metadataTable.getListColumns();      
    }
    
    List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
    for(IConnection conn : outgoingConns) {
        if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
            %>        
            <%=conn.getName() %> = null;            
            <%      
        }
    }
    
    List<Column> stmtStructure =  getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
    
    ////////////////////////////////////////////////////////////
    List<Column> colStruct =  new ArrayList();
    for(Column colStmt:stmtStructure){
        if(!colStmt.isReplaced()&&!colStmt.isAddCol()){
            colStruct.add(colStmt);
        }
    }

	boolean isParallelize ="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__PARALLELIZE__"));
	
	if (isParallelize) { // bug0014422
		String tAsyncIn_cid = "";
		if(conns!=null && conns.size() > 0) {
			tAsyncIn_cid = conns.get(0).getSource().getUniqueName();
		}
		if(!"true".equals(useExistingConn)) {
	    	if(!("").equals(commitEvery)&&!("0").equals(commitEvery)) {
%>
				commitEvery_<%=cid%> = buffersSize_<%=tAsyncIn_cid%>;
<%
	    	}
    	}
	} // end bug0014422

    if(incomingConnName != null && columnList != null) {
%>
        whetherReject_<%=cid%> = false;
<%    
        if(("INSERT").equals(dataAction)) {
			if(!extendedInsert) {
				int counter = 1;
				for(Column column : colStruct) {
					if(column.isInsertable()) {
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
%>
						<%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, NORMAL_TYPE)%>
<%
						counter++;                        
					}
				}
%>
				try {
					insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
					nb_line_<%=cid%>++;
				} catch(java.lang.Exception e) {
					whetherReject_<%=cid%> = true;
<%
					if (("true").equals(dieOnError)) {
%>
						throw(e);
<%
					} else {
						if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
%>
							<%=rejectConnName %> = new <%=rejectConnName %>Struct();
<%
							for(IMetadataColumn column : columnList) {
%>
								<%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
<%
							}
%>
							rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
							<%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
							<%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
<%
						} else {
%>
							System.err.print(e.getMessage());
<%
						}
					} 
%>
				}
<%
			} else { //extended insert
				String numPerInsert = ElementParameterParser.getValue(node, "__NB_ROWS_PER_INSERT__");
				    class ExtendInsertOperation{
					public String generateType(String typeToGenerate){
						if(("byte[]").equals(typeToGenerate)){
							typeToGenerate = "Bytes";
						}else if(("java.util.Date").equals(typeToGenerate)){
							typeToGenerate = "Date";
						}else if(("Integer").equals(typeToGenerate)){
							typeToGenerate = "Int";
						}else if(("List").equals(typeToGenerate)){  
							typeToGenerate = "Object";                 
						}else{
							typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
						}
						return typeToGenerate;
					}
					
					public void generateSetStmt(String typeToGenerate, Column column, String incomingConnName, String cid){
						boolean isObject = false;                               
						String prefix = "pstmt_";                             
						%>
				
						<%
						if(("Character").equals(typeToGenerate)){
							isObject = true;
							%>
							if(<%=incomingConnName%>.<%=column.getName()%>==null){
								<%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.CHAR);
								<%
						}else if(("Date").equals(typeToGenerate)){
							isObject = true;
							%>
							if(<%=incomingConnName%>.<%=column.getName()%>==null){
								<%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.DATE);
								<%
						}else if(("byte[]").equals(typeToGenerate)){
							isObject = true;
							%>
							if(<%=incomingConnName%>.<%=column.getName()%>==null){
								<%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.ARRAY);         
								<%
						}else if(("Long").equals(typeToGenerate)||("Byte").equals(typeToGenerate)||("Integer").equals(typeToGenerate)||("Short").equals(typeToGenerate)){
							isObject = true;
							%>
							if(<%=incomingConnName%>.<%=column.getName()%>==null){
								<%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.INTEGER);
								<%
						}else if(("String").equals(typeToGenerate)){
							isObject = true;
							%>
							if(<%=incomingConnName%>.<%=column.getName()%>==null){
								<%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.VARCHAR);
								<%
						}else if(("Object").equals(typeToGenerate)){
							isObject = true;
							%>
							if(<%=incomingConnName%>.<%=column.getName()%>==null){
								<%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.OTHER);
								<%
						}else if(("Boolean").equals(typeToGenerate)){
							isObject = true;
							%>
							if(<%=incomingConnName%>.<%=column.getName()%>==null){
								<%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.BOOLEAN);   
								<%
						}else if(("Double").equals(typeToGenerate)){
							isObject = true;
							%>
							if(<%=incomingConnName%>.<%=column.getName()%>==null){
								<%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.DOUBLE);    
								<%
						}else if(("Float").equals(typeToGenerate)){
							isObject = true;
							%>
							if(<%=incomingConnName%>.<%=column.getName()%>==null){
								<%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.FLOAT); 
								<%
						}
						if(isObject){
							%>
							}else{
							<%
						}
						typeToGenerate = generateType(typeToGenerate);
					
						if(("Char").equals(typeToGenerate)||("Character").equals(typeToGenerate)){
							%>
							<%
							if(isObject) {
								%>
								if(<%=incomingConnName%>.<%=column.getName()%>==null){
								<%
							} else {
								%>
								if(("null").equals(String.valueOf(<%=incomingConnName%>.<%=column.getName()%>).toLowerCase())){
								<%
							}
							%>
							<%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.CHAR);
						
							}else if(<%=incomingConnName%>.<%=column.getName()%> == '\0'){
					
								<%=prefix+cid%>.setString(counter<%=cid%>,"");
						
							}else{
						
								<%=prefix+cid%>.setString(counter<%=cid%>,String.valueOf(<%=incomingConnName%>.<%=column.getName()%>));
							}
							<%
						}else if(("Date").equals(typeToGenerate)){
							%>
							if(<%=incomingConnName%>.<%=column.getName()%>!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_<%=cid %> = <%=incomingConnName%>.<%=column.getName()%>.getTime();
								if (date_<%=cid %> < year1_<%=cid %> || date_<%=cid %> >= year10000_<%=cid %>) {
									<%=prefix+cid%>.setString(counter<%=cid%>, "0000-00-00 00:00:00");
								} else {
									<%=prefix+cid%>.setTimestamp(counter<%=cid%>, new java.sql.Timestamp(date_<%=cid %>));
								}
							}else{
					
								<%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.DATE);
						
							}
							<%
						}else{
							%>
							<%=prefix+cid%>.set<%=typeToGenerate%>(counter<%=cid%>,<%=incomingConnName%>.<%=column.getName()%>);
							<%
						}
						if(isObject){
							%>
						
							}
					
						<%
						}
					}
				}
				ExtendInsertOperation eiOperation = new ExtendInsertOperation(); 
				int insertableCount = 0;
				for(Column column : colStruct) {
					if(column.isInsertable()) {
						insertableCount++;
					}
				}
%>
				int counter<%=cid%> = rowCount<%=cid%> * <%=insertableCount%> + 1;
<%
				for(Column column : colStruct) {
					if(column.isInsertable()) {
						String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
						eiOperation.generateSetStmt(typeToGenerate,column,incomingConnName,cid);
						%>
						counter<%=cid%>++;
						<%
					}
				}
%>
				exInsertColValue<%=cid%> = new BufferLine_<%=cid%>(
<% 
	                int count =0;
	                for(Column column : colStruct) {
	                    if(column.isInsertable()) {
	                        if(count != 0) {
%>
	                            ,
<%
	                        }                        
%>
	                        <%=incomingConnName%>.<%=column.getName()%>              
<%                        
	                        count++;                    
	                    }   
	                }
%>  
				); 
	               
				exInsertColValueList<%=cid%>.add(exInsertColValue<%=cid%>);
				rowCount<%=cid%>++;
				
				if(rowCount<%=cid%> == <%=numPerInsert%>){ 
	                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
	                    exInsertColValueList<%=cid%>.clear();
	                    rowCount<%=cid%> = 0;
						counter<%=cid%>=1;
				} 
<%				
			}
        } else if(("UPDATE").equals(dataAction)) {
            int counterCol = 1;
            for(Column column : colStruct) {
                if(column.isUpdatable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
                    counterCol++;                   
                }
            }
    
            for(Column column : colStruct) {
                if(column.isUpdateKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    String dbType = column.getColumn().getType();
                    %>
                    
					<% 
                    //#############for feature:2880 and 6980
                    if(whereSupportNull && column.getColumn().isNullable()) { %>
                    	<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
                    <%  
					if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
                        <%
                    }
                    	counterCol++;
                       }
                     //#############                      
                    %> 
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
                    counterCol++;
                }
            }    
            %>
            try {
                updatedCount_<%=cid%> = updatedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
                nb_line_<%=cid%>++;
            } catch(java.lang.Exception e) {
                whetherReject_<%=cid%> = true;
                <%
                if (("true").equals(dieOnError)) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                        <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                        <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                        <%
                    } else {
                        %>
                        System.err.print(e.getMessage());
                        <%
                    }
                } 
                %>
            }
            <%
        } else if (("INSERT_OR_UPDATE").equals(dataAction)) {
            %>
    
            <%
            int columnIndex = 1;
            for(Column column : colStruct) {
                if(column.isUpdateKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    String dbType = column.getColumn().getType();
                    %>
					<% 
                    //#############for feature:2880 and 6980
                    if(whereSupportNull && column.getColumn().isNullable()) { %>
                    	<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, columnIndex, incomingConnName, cid, NORMAL_TYPE)%>
                    <%  
                    	columnIndex++;
                       }
                     //#############                      
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, columnIndex, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
                    columnIndex++;
                }
            }
            %>
    
            java.sql.ResultSet rs_<%=cid%> = pstmt_<%=cid %>.executeQuery();
            int checkCount_<%=cid%> = -1;
            while(rs_<%=cid%>.next()) {
                checkCount_<%=cid%> = rs_<%=cid%>.getInt(1);
            }
            if(checkCount_<%=cid%> > 0) {
                <%
                int counterCol = 1;
                for(Column column : colStruct) {
                    if(column.isUpdatable()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                        %>
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
                        <%
                        counterCol++;
                    }
                }
                for(Column column : colStruct) {
                    if(column.isUpdateKey()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                        String dbType = column.getColumn().getType();
                        %>
                        <% 
	                    //#############for feature:2880
	                    if(whereSupportNull && column.getColumn().isNullable()) { %>
	                    	<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
	                    <%  
		                     if(isEnableDebug) {
	                        %>
	                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
	                        <%
	                    	} 
	                    	counterCol++;
	                       }
	                     //#############                      
	                    %>
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
                        <%
                        counterCol++;                   
                    }
                }
                %>
                try {
                    updatedCount_<%=cid%> = updatedCount_<%=cid%> + pstmtUpdate_<%=cid %>.executeUpdate();
                } catch(java.lang.Exception e) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (("true").equals(dieOnError)) {
                        %>
                        throw(e);
                        <%
                    } else {
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                            %>
                            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                            %>
                            rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                            <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                            <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                            <%
                        } else {
                            %>
                            System.err.print(e.getMessage());
                            <%
                        }
                    } 
                    %>
                }
            } else {
                <%
                int counterInsert = 1;
                for(Column columnInsert : colStruct) {
                    if(columnInsert.isInsertable()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnInsert.getColumn().getTalendType(), columnInsert.getColumn().isNullable());
                        %>
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, columnInsert, counterInsert, incomingConnName, cid, INSERT_TYPE)%>
                        <%
                        counterInsert++;
                    }
                }
                %>
                try {
                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate();
                } catch(java.lang.Exception e) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (("true").equals(dieOnError)) {
                        %>
                        throw(e);
                        <%
                    } else {
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                            %>
                            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                            %>
                            rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                            <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                            <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                            <%
                        } else {
                            %>
                            System.err.print(e.getMessage());
                            <%
                        }
                    } 
                    %>
                }
            }
            nb_line_<%=cid%>++;
            <%
        } else if (("UPDATE_OR_INSERT").equals(dataAction)) {
            %>
            int updateFlag_<%=cid%>=0;
            <%
            int counterColUpdate = 1;
            for(Column columnUpdate : colStruct) {
                if(columnUpdate.isUpdatable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnUpdate.getColumn().getTalendType(), columnUpdate.getColumn().isNullable());
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE)%>
                    <%
                    counterColUpdate++;
                }
            }
    
            for(Column columnUpdate : colStruct) {
                if(columnUpdate.isUpdateKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnUpdate.getColumn().getTalendType(), columnUpdate.getColumn().isNullable());
                    String dbType = columnUpdate.getColumn().getType();
                    %>
					<% 
                    //#############for feature:2880 and 6980
                    if(whereSupportNull && columnUpdate.getColumn().isNullable()) { %>
                    	<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE)%>
                    <%  
	                    if(isEnableDebug) {
	                        %>
	                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_", "(("+incomingConnName+"."+columnUpdate.getName()+"==null)?1:0)")%>;
	                        <%
	                    	}
                    	counterColUpdate++;
                       }
                     //#############                      
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE)%>
                    <%
                    counterColUpdate++;
                }
            }
            %>
        
            try {
                updateFlag_<%=cid%>=pstmtUpdate_<%=cid %>.executeUpdate();
                updatedCount_<%=cid%> = updatedCount_<%=cid%>+updateFlag_<%=cid%>;
            if(updateFlag_<%=cid%> == 0) {
                <%
                int counter = 1;
                for(Column column : colStruct) {
                    if(column.isInsertable()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                        %>
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, counter, incomingConnName, cid, INSERT_TYPE)%>
                        <%
                        counter++;
                    }
                }
                %>
                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate();
             }
                } catch(java.lang.Exception e) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (("true").equals(dieOnError)) {
                        %>
                        throw(e);
                        <%
                    } else {
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                            %>
                            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                            %>
                            rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                            <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                            <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                            <%
                        } else {
                            %>
                            System.err.print(e.getMessage());
                            <%
                        }
                    } 
                    %>
                }
            nb_line_<%=cid%>++;
            <%
        
        }else if (("DELETE").equals(dataAction)){
            int keyCounter = 1;
            for(Column column : colStruct) {
                if(column.isDeleteKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    String dbType = column.getColumn().getType();
                    %>
					<% 
                    //#############for feature:2880 and 6980
                    if(whereSupportNull && column.getColumn().isNullable()) { %>
                    	<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, keyCounter, incomingConnName, cid, NORMAL_TYPE)%>
                    <%  
	                    if(isEnableDebug) {
	                        %>
	                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , keyCounter, "deleteSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
	                        <%
	                    	}
                    	 keyCounter++;
                       }
                     //#############                      
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, column, keyCounter, incomingConnName, cid, NORMAL_TYPE)%>
                    <%
                    keyCounter++;
                }
            }
            %>
            try {
                deletedCount_<%=cid%> = deletedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
            } catch(java.lang.Exception e) {
                whetherReject_<%=cid%> = true;
                <%
                if (("true").equals(dieOnError)) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                        <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                        <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                        <%
                    } else {
                        %>
                        System.err.print(e.getMessage());
                        <%
                    }
                } 
                %>
            }
            nb_line_<%=cid%>++;
        <%
        }
        
        if(outgoingConns != null && outgoingConns.size() > 0) {
            %>
            if(!whetherReject_<%=cid%>) {
                <%
                for(IConnection outgoingConn : outgoingConns) {
                    if(rejectConnName == null || (rejectConnName != null && !outgoingConn.getName().equals(rejectConnName))) {
                        if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {                            
                            %>
                            <%=outgoingConn.getName()%> = new <%=outgoingConn.getName()%>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%                  
                            }
                        }
                    }
                }
            %>
            }
        <%
        }   
        
        ////////////commit every////////////
        if(!("true").equals(useExistingConn)) {
            if(!("").equals(commitEvery)&&!("0").equals(commitEvery)) {
                %>
                commitCounter_<%=cid%>++;
        
                if(commitEvery_<%=cid%><=commitCounter_<%=cid%>) {
                
                    conn_<%=cid%>.commit();
                    
                    commitCounter_<%=cid%>=0;
        
                }
            <%
            }
        }
    }
    %>
