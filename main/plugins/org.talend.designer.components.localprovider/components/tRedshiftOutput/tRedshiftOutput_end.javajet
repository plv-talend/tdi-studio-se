<%@ jet 
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.MappingTypeRetriever
	org.talend.core.model.metadata.MetadataTalendType
	java.util.ArrayList
	java.util.HashMap
	java.util.List
	java.util.Map
"
skeleton="../templates/db_output_bulk.skeleton"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	
	String cid = node.getUniqueName();
	
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
	
	String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
	
	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
	
	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
	
	List<Map<String, String>> addCols =
        (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__");	
	
    boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));
    
    List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");
	
	List<IMetadataColumn> columnList = getColumnList(node);

	String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
	
    List<Column> stmtStructure =  getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
		
	boolean extendedInsert = false;
	
	Map<String, StringBuilder> actionSQLMap = getManager(dbmsId, cid).createProcessSQL(stmtStructure);
    StringBuilder insertColName = actionSQLMap.get(INSERT_COLUMN_NAME);   
    StringBuilder insertValueStmt = actionSQLMap.get(INSERT_VALUE_STMT);    
    StringBuilder updateSetStmt = actionSQLMap.get(UPDATE_SET_STMT);    
    StringBuilder updateWhereStmt = actionSQLMap.get(UPDATE_WHERE_STMT);
    StringBuilder deleteWhereStmt = actionSQLMap.get(DELETE_WHERE_STMT);
	
	if ("INSERT".equalsIgnoreCase(dataAction)) {
		extendedInsert = ("true").equals(ElementParameterParser.getValue(node, "__EXTENDINSERT__"));
	}
   
	//to fixed: bug8422
	if((cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){
		extendedInsert = false;
	}

	String numPerInsert = ElementParameterParser.getValue(node, "__NB_ROWS_PER_INSERT__");
	
	if(extendedInsert){
		class ExtendInsertOperation{
			public String generateType(String typeToGenerate){
				if(("byte[]").equals(typeToGenerate)){
					typeToGenerate = "Bytes";
				}else if(("java.util.Date").equals(typeToGenerate)){
					typeToGenerate = "Date";
				}else if(("Integer").equals(typeToGenerate)){
					typeToGenerate = "Int";
				}else if(("List").equals(typeToGenerate)){  
					typeToGenerate = "Object";                 
				}else{
					typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
				}
				return typeToGenerate;
			}
			
			public void generateSetStmt(String typeToGenerate,Column column,String cid){
				boolean isObject = false;                               
				String prefix = "pstmt_";                             

				if(("Character").equals(typeToGenerate)) {
					isObject = true;
					%>
					if(bufferL<%=cid%>.<%=column.getName()%>==null){
						<%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.CHAR);
					<%
				}else if(("Date").equals(typeToGenerate)){
					isObject = true;
					%>
					if(bufferL<%=cid%>.<%=column.getName()%>==null){
						<%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.DATE);
					<%
				}else if(("byte[]").equals(typeToGenerate)){
					isObject = true;
					%>
					if(bufferL<%=cid%>.<%=column.getName()%>==null){
						<%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.ARRAY);         
					<%
				}else if(("Long").equals(typeToGenerate)||("Byte").equals(typeToGenerate)||("Integer").equals(typeToGenerate)||("Short").equals(typeToGenerate)){
					isObject = true;
					%>
					if(bufferL<%=cid%>.<%=column.getName()%>==null){
						<%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.INTEGER);
					<%
				}else if(("String").equals(typeToGenerate)){
					isObject = true;
					%>
					if(bufferL<%=cid%>.<%=column.getName()%>==null){
						<%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.VARCHAR);
					<%
				}else if(("Object").equals(typeToGenerate)){
					isObject = true;
					%>
					if(bufferL<%=cid%>.<%=column.getName()%>==null){
						<%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.OTHER);
					<%
				}else if(("Boolean").equals(typeToGenerate)){
					isObject = true;
					%>
					if(bufferL<%=cid%>.<%=column.getName()%>==null){
						<%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.BOOLEAN);   
					<%
				}else if(("Double").equals(typeToGenerate)){
					isObject = true;
					%>
					if(bufferL<%=cid%>.<%=column.getName()%>==null){
						<%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.DOUBLE);    
					<%
				}else if(("Float").equals(typeToGenerate)){
					isObject = true;
					%>
					if(bufferL<%=cid%>.<%=column.getName()%>==null){
						<%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.FLOAT); 
					<%
				}
				if(isObject){
					%>

					}else{

					<%
				}
				typeToGenerate = generateType(typeToGenerate);
				
				if(("Char").equals(typeToGenerate)||("Character").equals(typeToGenerate)){
					%>
				<%
				if(isObject) {
					%>
					if(bufferL<%=cid%>.<%=column.getName()%>==null){
				<%
				} else {
					%>
					if(("null").equals(String.valueOf(bufferL<%=cid%>.<%=column.getName()%>).toLowerCase())){
				<%
				}
				%>
				<%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.CHAR);
					
				} else if(bufferL<%=cid%>.<%=column.getName()%> == '\0') {
				
					<%=prefix+cid%>.setString(count<%=cid%>,"");
					
				} else {
					
					<%=prefix+cid%>.setString(count<%=cid%>,String.valueOf(bufferL<%=cid%>.<%=column.getName()%>));
				}
				<%
				}else if(("Date").equals(typeToGenerate)){
					%>
					if(bufferL<%=cid%>.<%=column.getName()%>!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_<%=cid %> = bufferL<%=cid%>.<%=column.getName()%>.getTime();
						if (date_<%=cid %> < year1_<%=cid %> || date_<%=cid %> >= year10000_<%=cid %>) {
							<%=prefix+cid%>.setString(count<%=cid%>, "0000-00-00 00:00:00");
						} else {
							<%=prefix+cid%>.setTimestamp(count<%=cid%>, new java.sql.Timestamp(date_<%=cid %>));
						}
					}else{
				
						<%=prefix+cid%>.setNull(count<%=cid%>,java.sql.Types.DATE);
					
					}
					<%
				}else{
					%>
					<%=prefix+cid%>.set<%=typeToGenerate%>(count<%=cid%>,bufferL<%=cid%>.<%=column.getName()%>);
					<%
				}
				if(isObject){
					%>
					
					}
				
				<%
				}
			}
		}
		ExtendInsertOperation eiOperation = new ExtendInsertOperation();
	%>
	  
	
	    if(rowCount<%=cid%>!=0){
	
	        StringBuilder extendInsertValueStmt = new StringBuilder();
	        for(int i=0 ; i < rowCount<%=cid%> ; i++){
	             extendInsertValueStmt.append("(<%=insertValueStmt.toString()%>)");
	             if (i != rowCount<%=cid%> - 1) extendInsertValueStmt.append(",");
	        }
	        
	
			insert_<%=cid%> = "INSERT INTO "+<%=tableName%>+" (<%=insertColName.toString()%>) VALUES "+extendInsertValueStmt.toString();
			pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
	        
	        int row2Count<%=cid%> = 0;
			int count<%=cid%> = 0;
        
	        for(BufferLine_<%=cid%> bufferL<%=cid%> : exInsertColValueList<%=cid%>){            
				count<%=cid%> = row2Count<%=cid%>*<%=columnList.size()%>+1;         	          
	<% 
	            for(Column column : stmtStructure) {
	                if(!column.isReplaced() && !column.isAddCol() && column.isInsertable()) {
	                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());                     
	                    eiOperation.generateSetStmt(typeToGenerate, column, cid);
	                    %>
	                    count<%=cid%>++;
	                    <%
	                }
	            }
    %>
	    
	            row2Count<%=cid%>++;
	        }        
	        insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
	    }
	<%
	} // end extended insert case

	
    if(("INSERT_OR_UPDATE").equals(dataAction)) {
        %>
        if(pstmtUpdate_<%=cid%> != null){

            pstmtUpdate_<%=cid %>.close();
            
        } 
        if(pstmtInsert_<%=cid %> != null){

            pstmtInsert_<%=cid %>.close();
            
        }
        if(pstmt_<%=cid %> != null) {

            pstmt_<%=cid %>.close();
            
        }        
        <%
    } else if(("UPDATE_OR_INSERT").equals(dataAction)) {
        %>
        if(pstmtUpdate_<%=cid%> != null){

            pstmtUpdate_<%=cid %>.close();
            
        } 
        if(pstmtInsert_<%=cid %> != null){

            pstmtInsert_<%=cid %>.close();
            
        }        
        <%
    } else {
        %>
        if(pstmt_<%=cid %> != null) {

            pstmt_<%=cid %>.close();
            
        }        
        <%
    }   
    %>

    <%
	if(!("true").equals(useExistingConn))
	{
		if(!("").equals(commitEvery) && !("0").equals(commitEvery))
		{
			%>
			conn_<%=cid%>.commit();
            <%
		}
		%>	
    	conn_<%=cid%> .close();
    	resourceMap.put("finish_<%=cid%>", true);
    	<%
	}
    %>

<%@ include file="../templates/DB/Output/DBOutputEndGlobalVars.javajet"%>
