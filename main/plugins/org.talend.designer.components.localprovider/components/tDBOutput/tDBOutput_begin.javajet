<%@ jet 
	imports="
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser  
		org.talend.core.model.metadata.IMetadataTable 
        org.talend.core.model.metadata.MappingTypeRetriever		
        org.talend.core.model.metadata.MetadataTalendType		
		java.util.List
		java.util.ArrayList
		java.util.Map
		java.util.HashMap
	"
	skeleton="../templates/db_output_bulk.skeleton"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();	
	String cid = node.getUniqueName();	
	String dbTypeDefinition = ElementParameterParser.getValue(node, "__TYPE__");
	String [] dbtypes = dbTypeDefinition.split(";");                        
    String javaDbType = dbtypes[0];
    String javaDbDriver = dbtypes[1];
    String talendDbtype = dbtypes[2];
    String dbmsId = dbtypes[3];
    
    List<Map<String, String>> addCols =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(
                node,"__ADD_COLS__" );

    boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));
    
    List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");    
    
    String dbname= ElementParameterParser.getValue(node, "__DBNAME__");
    
    String dbhost = ElementParameterParser.getValue(node, "__HOST__");
    
	String dbport = ElementParameterParser.getValue(node, "__PORT__");
	
	String dbuser= ElementParameterParser.getValue(node, "__USER__");
	
	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
	
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
	
	String tableAction = ElementParameterParser.getValue(node,"__CLEAR_TABLE__");
	
	String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
	
	boolean isEnableDebug = ("true").equals(ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__"));
	boolean useStatement = ("true").equals(ElementParameterParser.getValue(node,"__USE_STATEMENT__"));
	String dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
%>
int nb_line_<%=cid%> = 0;
int nb_line_update_<%=cid%> = 0;
int nb_line_inserted_<%=cid%> = 0;
int nb_line_deleted_<%=cid%> = 0;
int nb_line_rejected_<%=cid%> = 0;

int deletedCount_<%=cid%> = 0;
int updatedCount_<%=cid%> = 0;
int insertedCount_<%=cid%> = 0;
int rejectedCount_<%=cid%> = 0;

boolean whetherReject_<%=cid%> = false;

<%
if(("undef").equals(javaDbType)) {
    %>
    String url_<%=cid %> = "jdbc:odbc:" + <%=dbname%>;
    <%
} else if(("mssql").equals(javaDbType)) {
    %>
    String url_<%=cid %> = "jdbc:odbc:" + <%=dbname%>;
    <%
} else if(("oracle").equals(javaDbType)) {
    %>
    String url_<%=cid %> = "jdbc:oracle:thin:@" + <%=dbhost%> + ":" + <%=dbport%> + ":" + <%=dbname%>;
    <%
} else if(("postgresql").equals(javaDbType)) {
    %>
    String url_<%=cid %> = "jdbc:postgresql://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=dbname%>;
    <%
} else if(("mysql").equals(javaDbType)) {
    %>
    String url_<%=cid %> = "jdbc:mysql://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=dbname%>;
    <%
}
List<IMetadataColumn> columnList = getColumnList(node);
List<Column> stmtStructure = null;
if(columnList != null && columnList.size() > 0) {
    stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
}
%>

<%
if(("UPDATE").equals(dataAction) || ("INSERT_OR_UPDATE").equals(dataAction) || ("UPDATE_OR_INSERT").equals(dataAction)) {
    int updateKeyCount = 0;
    if(stmtStructure != null) {
        for(Column column : stmtStructure) {
            if(column.isUpdateKey()) {
                updateKeyCount++;
            }
        }
        %>
        int updateKeyCount_<%=cid%> = <%=updateKeyCount%>;
        if(updateKeyCount_<%=cid%> < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
        <%
    }
} else if(("DELETE").equals(dataAction)) {
    int deleteKeyCount = 0;
    if(stmtStructure != null) {
        for(Column column : stmtStructure) {
            if(column.isDeleteKey()) {
                deleteKeyCount++;
            }
        }
        %>
        int deleteKeyCount_<%=cid%> = <%=deleteKeyCount%>;
        if(deleteKeyCount_<%=cid%> < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
        <%
    }
}
%> 
java.lang.Class.forName("<%=javaDbDriver %>");
String dbUser_<%=cid %> = <%=dbuser%>;
<%
String passwordFieldName = "__PASS__";
%>

<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

String dbPwd_<%=cid %> = decryptedPassword_<%=cid%>;

String dbProperties_<%=cid%> = <%=dbproperties%>;
java.sql.Connection conn_<%=cid%> = null;
if(dbProperties_<%=cid%> == null || dbProperties_<%=cid%>.trim().length() == 0) {
	conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>,dbUser_<%=cid%>,dbPwd_<%=cid%>);
}else{
	dbProperties_<%=cid%> = dbProperties_<%=cid%>.replaceAll("&", "\n");
	java.util.Properties atnParamsPrope_<%=cid%> = new java.util.Properties();
	atnParamsPrope_<%=cid%>.put("user",dbUser_<%=cid%>);
	atnParamsPrope_<%=cid%>.put("password",dbPwd_<%=cid%>);
	atnParamsPrope_<%=cid%>.load(new java.io.ByteArrayInputStream(dbProperties_<%=cid%>.getBytes()));
	conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid%>, atnParamsPrope_<%=cid%>);
}
resourceMap.put("conn_<%=cid%>", conn_<%=cid%>);
conn_<%=cid%>.setAutoCommit(false);
<%
if(("true").equals(tableAction)) {
    %>
    java.sql.Statement stmtClear_<%=cid%> = conn_<%=cid%>.createStatement();
    deletedCount_<%=cid%> = deletedCount_<%=cid%> + stmtClear_<%=cid%>.executeUpdate("delete from " + <%=tableName%>);
    <%	
}
%>
<%
if(columnList != null && columnList.size() > 0) {
    Map<String, StringBuilder> actionSQLMap = getManager(dbmsId, cid).createProcessSQL(stmtStructure);
    StringBuilder insertColName = actionSQLMap.get(INSERT_COLUMN_NAME);   
    StringBuilder insertValueStmt = actionSQLMap.get(INSERT_VALUE_STMT);    
    StringBuilder updateSetStmt = actionSQLMap.get(UPDATE_SET_STMT);    
    StringBuilder updateWhereStmt = actionSQLMap.get(UPDATE_WHERE_STMT);
    StringBuilder deleteWhereStmt = actionSQLMap.get(DELETE_WHERE_STMT);

	if(("INSERT").equals(dataAction)) {
	    %>
	    String insert_<%=cid%> = "INSERT INTO " + <%=tableName%> + " (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
		<%if(useStatement){%>
	    	java.sql.Statement pstmt_<%=cid %> = conn_<%=cid%>.createStatement();
	    <%}else{%>
	    	java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
	    <%
	    }
	} else if (("UPDATE").equals(dataAction)) {
	    %>
	    String update_<%=cid%> = "UPDATE " + <%=tableName%> + " SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
	    <%if(useStatement){%>
	    	java.sql.Statement pstmt_<%=cid %> = conn_<%=cid%>.createStatement();
	    <%}else{%>
	    	java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
	    <%		
	    }
	} else if (("INSERT_OR_UPDATE").equals(dataAction)) {
	    %>
	    	String checkExist_<%=cid%> = "SELECT COUNT(1) FROM " + <%=tableName%> + " WHERE <%=updateWhereStmt.toString()%>";
	    	String insert_<%=cid%> = "INSERT INTO " + <%=tableName%> + " (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
	    	String update_<%=cid%> = "UPDATE " + <%=tableName%> + " SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
	    <%if(useStatement){%>
	    	String[] checkExistSQLSplits_<%=cid%> = (checkExist_<%=cid%>+" ").split("\\?");
	    	java.sql.Statement pstmt_<%=cid %> = conn_<%=cid%>.createStatement();
	    	java.sql.Statement pstmtInsert_<%=cid %> = conn_<%=cid%>.createStatement();
	    	java.sql.Statement pstmtUpdate_<%=cid %> = conn_<%=cid%>.createStatement();
	    <%}else{%>
		    java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(checkExist_<%=cid%>);
		    java.sql.PreparedStatement pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
		    java.sql.PreparedStatement pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);	
	    <%
	    }
	} else if (("UPDATE_OR_INSERT").equals(dataAction)) {
	    %>
	    String update_<%=cid%> = "UPDATE " + <%=tableName%> + " SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
	    String insert_<%=cid%> = "INSERT INTO " + <%=tableName%> + " (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
	    <%if(useStatement){%>
		    java.sql.Statement pstmtUpdate_<%=cid %> = conn_<%=cid%>.createStatement();
		    java.sql.Statement pstmtInsert_<%=cid %> = conn_<%=cid%>.createStatement();		
	    <%}else{%>
		    java.sql.PreparedStatement pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
		    java.sql.PreparedStatement pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);		
	    <%}
	} else if (("DELETE").equals(dataAction)) {
	    %>
	    String delete_<%=cid%> = "DELETE  FROM " + <%=tableName%> + " WHERE <%=deleteWhereStmt.toString()%>";
	    <%if(useStatement){%>
	    	java.sql.Statement pstmt_<%=cid %> = conn_<%=cid%>.createStatement();
	    <%}else{%>
	    	java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(delete_<%=cid%>);
	    <%}		
	}
    if(useStatement || isEnableDebug) {
        %>
        StringBuffer query_<%=cid%> = null;
       	<%@ include file="../templates/DB/Output/splitSQLForAllDBInBegin.javajet" %>
        <%
    }
	if(!("").equals(commitEvery) && !("0").equals(commitEvery)) {
	    %>
	    int commitEvery_<%=cid%> = <%=commitEvery%>;
	    int commitCounter_<%=cid%> = 0;
	    <%
	}	
}
%>
