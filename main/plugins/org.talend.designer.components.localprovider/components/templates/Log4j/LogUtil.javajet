<%@jet%>

<%
class BasicLogUtil{
	String cid  = "";
	private INode node = null;
	private boolean log4jEnabled = false;
	private String logID = "";
	
	public BasicLogUtil(INode node){
		this.node = node;
		this.cid = this.node.getUniqueName();
		this.log4jEnabled = ("true").equals(ElementParameterParser.getValue(this.node.getProcess(), "__LOG4J_ACTIVATE__"));
		this.logID = "\"" + this.cid + " - \"";
	}
	
	public String var(String varName, String cid){
		return varName + "_" + cid;
	}
	public String str(String content){
		return "\"" + content + "\"";
	}
	
	public void info(String... message){
		log4j("info", message);
	}
	
	public void debug(String... message){
		log4j("debug", message);
	}
	
	public void warn(String... message){
		log4j("warn", message);
	}
	
	public void error(String... message){
		log4j("error", message);
	}
	
	public void fatal(String... message){
		log4j("fatal", message);
	}
	
	public void trace(String... message){
		log4j("trace", message);
	}
	
	private void log4j(String level, String... messages){
		if(log4jEnabled){
		%>
			log.<%=level%>(<%=logID%> <%for(String message : messages){%> + <%=message%> <%}%>);
		<%
		}
	}
}

class LogUtil extends BasicLogUtil{
	
	private LogUtil(){
	}
	
	public LogUtil(INode node){
		super(node);
	}
	
	public void startWork(){
		info(str("Start to work."));
		logCompSetting();
	}
	
	public void endWork(){
		info(str("Done."));
	}
	
	public void logIgnoredException(String exception){
		warn(exception);
	}
	
	public void logPrintedException(String exception){
		error(exception);
	}
	
	public void logException(String exception){
		fatal(exception);
	}
	
	private void logCompSetting(){
    	if(log4jEnabled){
    	%>
    		StringBuilder <%=var("log4jParamters")%> = new StringBuilder();
    	   	<%=var("log4jParamters")%>.append("Parameters:");
    	   	<%
    	   	private java.util.Set<org.talend.core.model.process.EParameterFieldType> ignoredParamsTypes = new java.util.HashSet<org.talend.core.model.process.EParameterFieldType>(); 
    	   	ignoredParamsTypes.addAll(
    	   		java.util.Arrays.asList(
    		   		org.talend.core.model.process.EParameterFieldType.SCHEMA_TYPE,
    		   		org.talend.core.model.process.EParameterFieldType.LABEL,
    		   		org.talend.core.model.process.EParameterFieldType.EXTERNAL,
    		   		org.talend.core.model.process.EParameterFieldType.MAPPING_TYPE,
    		   		org.talend.core.model.process.EParameterFieldType.IMAGE)
    	   	);
       		for(org.talend.core.model.process.IElementParameter ep : org.talend.core.model.utils.NodeUtil.getDisplayedParameters(node)){
       			if(ignoredParamsTypes.contains(ep.getFieldType()) || (ignoredParamsList!=null && ignoredParamsList.contains(ep.getName()))){
       				continue;
       			}
       			String name = ep.getName();
       			String value = org.talend.core.model.utils.NodeUtil.getNormalizeParameterValue(node, ep);
       			%>
    			<%=var("log4jParamters")%>.append("<%=name%>" + " = " + <%=value%>);
    			<%=var("log4jParamters")%>.append(" | ");
    		<%
       		}
    	}
   		debug(var("log4jParamters"));
    }
    
    public void traceData(String rowStruct, List<IMetadataColumn> columnList, String nbline){
    %>
    	StringBuilder <%=var(log4jSb)%> = new StringBuilder();	
    	<%
		for(IMetadataColumn column : columnList){
			JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
			String columnName = column.getLabel();
			boolean isPrimit = JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable());
			if(isPrimit){
				if(javaType == JavaTypesManager.BYTE || javaType == JavaTypesManager.SHORT){
				%>
					<%=var(log4jSb)%>.append(String.valueOf(<%=rowStruct%>.<%=columnName%>));
				<%
				}else{
				%>
					<%=var(log4jSb)%>.append(<%=rowStruct%>.<%=columnName%>);
				<%
				}
			}else{
			%>
				if(<%=rowStruct%>.<%=columnName%> == null){
					<%=var(log4jSb)%>.append("<null>");
				}else{
    				<%
        			if(javaType == JavaTypesManager.STRING){
        			%>
        				<%=var(log4jSb)%>.append(<%=rowStruct%>.<%=columnName%>);
        			<%
        			}else{
        			%>
        				<%=var(log4jSb)%>.append(String.valueOf(<%=rowStruct%>.<%=columnName%>));
        			<%
        			}
        			%>
    			}	
    		<%
    		}
    		%>
			<%=var(log4jSb)%>.append(String.valueOf(<%=rowStruct%>.<%=columnName%>));
		<%
		}
		trace(str("Content of the record "), nbline, str(": "), var(log4jSb), str("."));
		%>
		//<%=var(log4jSb)%>.delete(0, <%=var(log4jSb)%>.length());
	<%
    }
}
LogUtil log = null;
%>