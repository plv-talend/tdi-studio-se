<%@jet%>

<%
class BasicLogUtil{
	String cid  = "";
	private INode node = null;
	private boolean log4jEnabled = false;
	private String logID = "";
	
	public BasicLogUtil(INode node){
		this.node = node;
		this.cid = this.node.getUniqueName();
		this.log4jEnabled = ("true").equals(ElementParameterParser.getValue(this.node.getProcess(), "__LOG4J_ACTIVATE__"));
		this.logID = "\"" + this.cid + " - \"";
	}
	
	public String var(String varName, String cid){
		return varName + "_" + cid;
	}
	public String str(String content){
		return "\"" + content + "\"";
	}
	
	public void logInfo(String... message){
		log4j("info", message);
	}
	
	public void logDebug(String... message){
		log4j("debug", message);
	}
	
	public void logWarn(String... message){
		log4j("warn", message);
	}
	
	public void logError(String... message){
		log4j("error", message);
	}
	
	public void logFatal(String... message){
		log4j("fatal", message);
	}
	
	public void logTrace(String... message){
		log4j("trace", message);
	}
	
	private void log4j(String level, String... messages){
		if(log4jEnabled){
		%>
			log.<%=level%>(<%=logID%> <%for(String message : messages){%> + <%=message%> <%}%>);
		<%
		}
	}
}

class LogUtil extends BasicLogUtil{
	
	private LogUtil(){
	}
	
	public LogUtil(INode node){
		super(node);
	}
	
	public void startWork(){
		logInfo(str("Start to work."));
		logCompSetting();
	}
	
	public void endWork(){
		logInfo(str("Done."));
	}
	
	public void logIgnoredException(String exception){
		logWarn(exception);
	}
	
	public void logPrintedException(String exception){
		logError(exception);
	}
	
	public void logException(String exception){
		logFatal(exception);
	}
	
	private void logCompSetting(){
    	if(log4jEnabled){
    	%>
    		StringBuilder <%=var("log4jParamters")%> = new StringBuilder();
    	   	<%=var("log4jParamters")%>.append("Parameters:");
    	   	<%
    	   	private java.util.Set<org.talend.core.model.process.EParameterFieldType> ignoredParamsTypes = new java.util.HashSet<org.talend.core.model.process.EParameterFieldType>(); 
    	   	ignoredParamsTypes.addAll(
    	   		java.util.Arrays.asList(
    		   		org.talend.core.model.process.EParameterFieldType.SCHEMA_TYPE,
    		   		org.talend.core.model.process.EParameterFieldType.LABEL,
    		   		org.talend.core.model.process.EParameterFieldType.EXTERNAL,
    		   		org.talend.core.model.process.EParameterFieldType.MAPPING_TYPE,
    		   		org.talend.core.model.process.EParameterFieldType.IMAGE)
    	   	);
       		for(org.talend.core.model.process.IElementParameter ep : org.talend.core.model.utils.NodeUtil.getDisplayedParameters(node)){
       			if(ignoredParamsTypes.contains(ep.getFieldType()) || (ignoredParamsList!=null && ignoredParamsList.contains(ep.getName()))){
       				continue;
       			}
       			String name = ep.getName();
       			String value = org.talend.core.model.utils.NodeUtil.getNormalizeParameterValue(node, ep);
       			%>
    			<%=var("log4jParamters")%>.append("<%=name%>" + " = " + <%=value%>);
    			<%=var("log4jParamters")%>.append(" | ");
    		<%
       		}
    	}
   		logDebug(var("log4jParamters"));
    }
    
    public void traceData(String rowStruct, List<IMetadataColumn> columnList, String nbline){
    %>
    	StringBuilder <%=var(log4jSb)%> = new StringBuilder();	
    	<%
		for(IMetadataColumn column : columnList){
			JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
			String columnName = column.getLabel();
			boolean isPrimit = JavaTypesManager.isJavaPrimitiveType(column.getTalendType(), column.isNullable());
			if(isPrimit){
				if(javaType == JavaTypesManager.BYTE || javaType == JavaTypesManager.SHORT){
				%>
					<%=var(log4jSb)%>.append(String.valueOf(<%=rowStruct%>.<%=columnName%>));
				<%
				}else{
				%>
					<%=var(log4jSb)%>.append(<%=rowStruct%>.<%=columnName%>);
				<%
				}
			}else{
			%>
				if(<%=rowStruct%>.<%=columnName%> == null){
					<%=var(log4jSb)%>.append("<null>");
				}else{
    				<%
        			if(javaType == JavaTypesManager.STRING){
        			%>
        				<%=var(log4jSb)%>.append(<%=rowStruct%>.<%=columnName%>);
        			<%
        			}else{
        			%>
        				<%=var(log4jSb)%>.append(String.valueOf(<%=rowStruct%>.<%=columnName%>));
        			<%
        			}
        			%>
    			}	
    		<%
    		}
    		%>
			<%=var(log4jSb)%>.append(String.valueOf(<%=rowStruct%>.<%=columnName%>));
		<%
		}
		logTrace(str("Content of the record "), nbline, str(": "), var(log4jSb), str("."));
		%>
		//<%=var(log4jSb)%>.delete(0, <%=var(log4jSb)%>.length());
	<%
    }
}

class DBLogUtil extends LogUtil{
	DBConnLogUtil conn = null;
	DBTableActionLogUtil table = null;
	DBCommitLogUtil commit = null;
	DBBatchLogUtil batch = null;
	DBDataActionLogUtil data = null;
	DBStateLogUtil state = null;
	private DBLogUtil(){}
	
	protected DBLogUtil(INode node){
		super(node);
		conn = new DBConnLogUtil(node);
    	table = new DBTableActionLogUtil(node);
    	commit = new DBCommitLogUtil(node);
    	batch = new DBBatchLogUtil(node);
    	data = new DBDataActionLogUtil(node);
    	state = new DBStateLogUtil(node);
	}
	
	public DBConnLogUtil conn(){
		return conn;
	}
	
	public DBTableActionLogUtil table(){
		return table;
	}
	
	public DBCommitLogUtil commit(){
		return commit;
	}
	
	public DBBatchLogUtil batch(){
		return batch;
	}
	
	public DBDataActionLogUtil data(){
		return data;
	}
	
	public DBStateLogUtil state(){
		return state;
	}
}

class DBConnLogUtil extends BasicLogUtil{
	
	private DBConnLogUtil(){}
	
	protected DBConnLogUtil(INode node){
		super(node);
	}
	
	public void logJDBCDriver(String driverClass){
		logDebug(str("Driver ClassName: "), driverClass, str("."));
	}
	
	public void connTry(String url, String dbUser){
		if(dbUser != null){
			logInfo(str("Connection attempt to '"), url, str("' with the username '"), dbUser, str("."));
		}else{
			logInfo(str("Connection attempt to '"), url, str("'."));
		}
	}
	
	public void connDone(String url){
		logInfo(str("Connection to '"), url, str("' has succeeded."));
	}
	
	public void useExistConn(String url, String dbUser){
		logInfo(str("Uses an existing connection with username '"), dbUser, str("'. Connection URL: "), url, str("."));
	}
	
	public void closeTry(String connCompID){
		if(connCompID == null){
			logInfo(str("Closing the connection to the database."));
		}else{
			logInfo(str("Closing the connection "), connCompID, str(" to the database."));
		}
	}
	
	public void closeDone(String connCompID){
		if(connCompID == null){
			logInfo(str("Connection to the database has closed."));	
		}else{
			logInfo(str("Connection "), connCompID, str(" to the database has closed."));
		}
	}
}

class DBTableActionLogUtil extends BasicLogUtil{
	private DBTableActionLogUtil(){}
	
	protected DBTableActionLogUtil(INode node){
		super(node);
	}
	
	public void dropTry(String tableName){
		tableActionTry("Droping", tableName);
	}
	
	public void dropDone(String tableName){
		tableActionDone("Drop", tableName);
	}
	
	public void createTry(String tableName){
		tableActionTry("Creating", tableName);
	}
	
	public void createDone(String tableName){
		tableActionDone("Create", tableName);
	}
	
	public void clearTry(String tableName){
		tableActionTry("Clearing", tableName);
	}
	
	public void clearDone(String tableName){
		tableActionDone("Clear", tableName);
	}
	
	public void trancateTry(String tableName){
		tableActionTry("Trancating", tableName);
	}
	
	public void trancateDone(String tableName){
		tableActionDone("Truncate", tableName);
	}
	
	public void trancateReuseStorageTry(String tableName){
		tableActionTry("Trancating reuse storage", tableName);
	}
	
	public void trancateReuseStorageDone(String tableName){
		tableActionDone("Truncate reuse stroage", tableName);
	}
	
	private void tableActionTry(String tableName, String action){
		logInfo(str(action + " table '"), tableName, str("'."));
	}
	
	private void tableActionDone(String tableName, String action){
		logInfo(str(action + " table '"), tableName, str("' has succeeded."));
	}
}

class DBCommitLogUtil extends BasicLogUtil{
	private DBCommitLogUtil(){}
	
	protected DBCommitLogUtil(INode node){
		super(node);
	}
	
	public void logAutoCommit(String autoCommit){
		logDebug(str("Connection is set auto commit to '"), autoCommit, str("'."));
	}

	public void commitTry(String connCompID, String commitCount){
		if(commitCount == null && connCompID == null){
			logDebug(str("Connection starting to commit."));
		}else if(commitCount == null){
			logDebug(str("Connection "), connCompID, str(" starting to commit."));	
		}else if(connCompID == null){
			logDebug(str("Connection starting to commit "), commitCount, str(" records."));
		}else{
			logDebug(str("Connection "), connCompID, str(" starting to commit "), commitCount, str(" records."));
		}
	}
	
	public void commitDone(String connCompID){
		if(connCompID == null){
			logDebug(str("Connection commit has succeeded."));
		}else{
			logDebug(str("Connection "), connCompID, (" commit has succeeded."));
		}
	}
}

class DBBatchLogUtil extends BasicLogUtil{
	private DBBatchLogUtil(){}
	
	protected DBBatchLogUtil(INode node){
		super(node);
	}
	
	public void executeTry(String action){
		logDebug(str("Executing the '"), action, str("' batch."));
	}
	
	public void executeDone(String action){
		logDebug(str("The '"), action, str("' batch execution has succeeded."));
	}
}

class DBDataActionLogUtil extends BasicLogUtil{
	private DBDataActionLogUtil(){}
	
	protected DBDataActionLogUtil(INode node){
		super(node);
	}
	
	public void inserting(String nbline){
		sqlAction(nbline, str("Inserting"));
	}
	
	public void deleting(String nbline){
		sqlAction(nbline, str("Deleting"));
	}
	
	public void updating(String nbline){
		sqlAction(nbline, str("Updating"));
	}
	
	private void sqlAction(String nbline, String action){
		logDebug(action, str(" the record "), nbline, str("."));
	}

	public void addingToBatch(String nbline, String batchAction){
		logDebug(str("Adding the record "), nbline, str(" to the "), batchAction, str(" batch."));
	}
}

class DBStateLogUtil extends BasicLogUtil{
	private DBStateLogUtil(){}
	
	protected DBStateLogUtil(INode node){
		super(node);
	}
	
	public void logInsertedLines(String nbline){
		logFinishedLines(nbline, str("inserted"));
	}
	
	public void logUpdatedLines(String nbline){
		logFinishedLines(nbline, str("updated"));
	}
	
	public void logDeletedLines(String nbline){
		logFinishedLines(nbline, str("deleted"));
	}
	
	public void logRejectedLines(String nbline){
		logFinishedLines(nbline, str("rejected"));
	}
	
	private void logFinishedLines(String nbline, String action){
		logInfo(str("Has "), action, str(" "), nbline, str(" records."));
	}
}
%>