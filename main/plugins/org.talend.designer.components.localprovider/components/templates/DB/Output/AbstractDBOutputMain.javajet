<%@ jet
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String tableName = ElementParameterParser.getValue(node,"__TABLE__");
String table = ElementParameterParser.getValue(node,"__TABLE__");
String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
boolean useStatement = ("true").equals(ElementParameterParser.getValue(node,"__USE_STATEMENT__"));//tDBOutput
List<Map<String, String>> addCols =
		(List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__");
boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));
List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");
boolean useExistingConnection = "true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
boolean isEnableDebug = ("true").equals(ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__"));
boolean showSavePoint = dbOutputBeginUtil.showSavePoint(node);
//feature:2880
Manager manager = getManager(dbmsId, cid, node);
boolean whereSupportNull = ElementParameterParser.getValue(node, "__SUPPORT_NULL_WHERE__").equals("true");
String incomingConnName = null;
List<IMetadataColumn> columnList = getColumnList(node);
List< ? extends IConnection> conns = node.getIncomingConnections();
if(conns!=null && conns.size()>0){
	IConnection conn = conns.get(0);
	incomingConnName = conn.getName();
}
String rejectConnName = null;
List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
if(rejectConns != null && rejectConns.size() > 0) {
	IConnection rejectConn = rejectConns.get(0);
	rejectConnName = rejectConn.getName();
}
List<IMetadataColumn> rejectColumnList = null;
IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
if(metadataTable != null) {
	rejectColumnList = metadataTable.getListColumns();
}
List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
for(IConnection conn : outgoingConns) {
	if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
		%>
		<%=conn.getName() %> = null;
		<%
	}
}
dbOutputBeginUtil.beforeComponentProcess(node);
dbOutputBeginUtil.setDBVersion(node,manager);//Oracle,Mysql
log4jCodeGenerateUtil = dbOutputBeginUtil.log4jCodeGenerateUtil;
String dataAction = dbOutputBeginUtil.dataAction;
String dieOnError = dbOutputBeginUtil.dieOnError;
String commitEvery = dbOutputBeginUtil.commitEvery;
boolean useBatchSize = dbOutputBeginUtil.useBatchSize;
String batchSize = dbOutputBeginUtil.batchSize;
boolean isDynamic = false;
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
	IMetadataTable metadata = metadatas.get(0);
	isDynamic = metadata.isDynamicSchema();
}
List<Column> stmtStructure = manager.createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
isDynamic = isDynamic && !manager.isDynamicColumnReplaced();
IMetadataColumn talendDynCol = null;
List<Column> colStruct = dbOutputBeginUtil.getColStruct(stmtStructure);
if(isDynamic) {
%>
	if(nb_line_<%=cid%>==0) {
		<%
		Map<String, String> hintsValues = dbOutputBeginUtil.hint(node);
		boolean useHintOptions = ("true").equals(ElementParameterParser.getValue(node,"__USE_HINT_OPTIONS__"));
		List<Map<String, String>> hintOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__HINT_OPTIONS__");
		%>
		<%@ include file="../../_hintTableName.javajet" %>
		<%
		if(columnList != null && columnList.size()>0) {
		%>
			<%@ include file="../../_tableActionForOutput.javajet"%>
			<%
			dbOutputBeginUtil.actionOnTable(node,stmtStructure);
			Map<String, StringBuilder> actionSQLMap = manager.createProcessSQL(stmtStructure);
			StringBuilder insertColName = actionSQLMap.get(INSERT_COLUMN_NAME);
			StringBuilder insertValueStmt = actionSQLMap.get(INSERT_VALUE_STMT);
			StringBuilder updateSetStmt = actionSQLMap.get(UPDATE_SET_STMT);
			StringBuilder updateWhereStmt = actionSQLMap.get(UPDATE_WHERE_STMT);
			StringBuilder deleteWhereStmt = actionSQLMap.get(DELETE_WHERE_STMT);

			talendDynCol = getDynamicColumn();
			if(("INSERT").equals(dataAction)) {
				dbOutputBeginUtil.preparedStatInsert(node,manager,insertColName,insertValueStmt,talendDynCol,isDynamic);
			} else if (("UPDATE").equals(dataAction)) {
				List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
				if(conns_dynamic!=null && conns_dynamic.size()>0){
					IConnection conn = conns_dynamic.get(0);
					if(!("".equals(updateSetStmt.toString()))) {
					%>
						String update_<%=cid%> = "UPDATE <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> SET <%=updateSetStmt.toString()%>, "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=talendDynCol%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
					<%
					} else {
					%>
						String update_<%=cid%> = "UPDATE <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> SET "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=talendDynCol%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
					<%
					}
				}
				dbOutputBeginUtil.changeSQL();
				%>
				<%@ include file="../../_hintUpdate.javajet" %>
				pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
			<%
			} else if (("INSERT_OR_UPDATE").equals(dataAction)) {
				dbOutputBeginUtil.checkExist(manager,updateWhereStmt.toString());
				List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
				if(conns_dynamic!=null && conns_dynamic.size()>0){
					IConnection conn = conns_dynamic.get(0);

					if(!("".equals(insertColName.toString()))) {
					%>
						String insert_<%=cid%> = "INSERT INTO <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=talendDynCol%>, "<%=dbmsId %>")+") VALUES (<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=talendDynCol%>)+")";
					<%
					} else {
					%>
						String insert_<%=cid%> = "INSERT INTO <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=talendDynCol%>, "<%=dbmsId %>")+") VALUES ("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=talendDynCol%>)+")";
					<%
					}
					if(!("".equals(updateSetStmt.toString()))) {
					%>
						String update_<%=cid%> = "UPDATE <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> SET <%=updateSetStmt.toString()%>, "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=talendDynCol%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
					<%
					} else {
					%>
						String update_<%=cid%> = "UPDATE <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> SET "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=talendDynCol%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
					<%
					}
				}
				dbOutputBeginUtil.changeSQL();
				%>
				pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(checkExist_<%=cid%>);
				<%@ include file="../../_hintInsert.javajet" %>
				pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
				<%@ include file="../../_hintUpdate.javajet" %>
				pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
				<%
			} else if (("UPDATE_OR_INSERT").equals(dataAction)) {
				List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
					if(conns_dynamic!=null && conns_dynamic.size()>0){
						IConnection conn = conns_dynamic.get(0);

						if(!("".equals(insertColName.toString()))) {
						%>
							String insert_<%=cid%> = "INSERT INTO <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=talendDynCol%>, "<%=dbmsId %>")+") VALUES (<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=talendDynCol%>)+")";
						<%
						} else {
						%>
							String insert_<%=cid%> = "INSERT INTO <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=talendDynCol%>, "<%=dbmsId %>")+") VALUES ("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=talendDynCol%>)+")";
						<%
						}
						if(!("".equals(updateSetStmt.toString()))) {
						%>
							String update_<%=cid%> = "UPDATE <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> SET <%=updateSetStmt.toString()%>, "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=talendDynCol%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
						<%
						} else {
						%>
							String update_<%=cid%> = "UPDATE <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> SET "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=talendDynCol%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
						<%
						}
    					dbOutputBeginUtil.changeSQL();
					}
				%>
				<%@ include file="../../_hintUpdate.javajet" %>
				pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
				<%@ include file="../../_hintInsert.javajet" %>
				pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
				<%
			} else if (("DELETE").equals(dataAction)) {
				%>
				String delete_<%=cid%> = "DELETE FROM <%=manager.getLProtectedChar()%>" + tableName_<%=cid%> + "<%=manager.getRProtectedChar()%> WHERE <%=deleteWhereStmt.toString()%>";
				<%dbOutputBeginUtil.changeSQL();%>
				<%@ include file="../../_hintDelete.javajet" %>
				pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(delete_<%=cid%>);
				<%
			}
			dbOutputBeginUtil.prepareDataActionMore(node,manager,insertColName,insertValueStmt,updateSetStmt,updateWhereStmt);
			if(isEnableDebug) {
				%>
			   <%@ include file="../../DB/Output/splitSQLForAllDBInDynamicMain.javajet" %>
			   <%
			}
			dbOutputBeginUtil.prepareForTable(node);
		}
		%>
	}
	<%
}
if(useStatement || isEnableDebug) {
%>
	query_<%=cid%> = new StringBuffer("");
<%
}
boolean isParallelize ="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__PARALLELIZE__"));
String useCommitControl = ElementParameterParser.getValue(node,"__USE_COMMIT_CONTROL__");
if (isParallelize) { // bug0014422
	String tAsyncIn_cid = "";
	if(conns!=null && conns.size() > 0) {
		tAsyncIn_cid = conns.get(0).getSource().getUniqueName();
	}
	if(!useExistingConnection) {
		if(!("false").equals(useCommitControl)) {// if use commit control
			if(!("").equals(commitEvery)&&!("0").equals(commitEvery)) {
			%>
				commitEvery_<%=cid%> = buffersSize_<%=tAsyncIn_cid%>;
			<%
			}
		}
	}
		if(dbOutputBeginUtil.executeBatch) {
		%>
			batchSize_<%=cid%> = buffersSize_<%=tAsyncIn_cid%>;
		<%
		}
}

if(incomingConnName != null && columnList != null) {
%>
	whetherReject_<%=cid%> = false;
	<%
	if(("INSERT").equals(dataAction)) {
		dbOutputBeginUtil.insertData(node,colStruct,manager,incomingConnName,isDynamic,NORMAL_TYPE,rejectColumnList,columnList,talendDynCol);
	} else if(("UPDATE").equals(dataAction)) {
		int counterCol = 1;
		for(Column column : colStruct) {
			if(column.isUpdatable()) {
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
				%>
				<%dbOutputBeginUtil.generateSetStmt(manager,typeToGenerate, column, counterCol, incomingConnName, cid, NORMAL_TYPE);%>
				<%
				if(useStatement || isEnableDebug) {
					%>
					query_<%=cid%> = <%=manager.retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
					<%
				}
				if (typeToGenerate.equals("Geometry"))
					counterCol++;
				counterCol++;
			}
		}
		if(isDynamic) {
			Column dynamicColumn = getColumn(talendDynCol);
			String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
			if("Dynamic".equals(typeToGenerate)) {
                if(useStatement || isEnableDebug) {
                %>
                    routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counterCol%>,updateSQLSplits_<%=cid%>);
                <%
                }
                %>
				int count_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmt_<%=cid%>, <%=counterCol-1%>, "<%=dbmsId%>");
			<%
			}
		}

		for(Column column : colStruct) {
			if(column.isUpdateKey()) {
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
				//#############for feature:2880 and 6980
				if(whereSupportNull && column.getColumn().isNullable()) { 
				    if(isDynamic){
				    %>
					   <%=manager.generateSetBooleanForNullableKeyStmt(talendDynCol.getLabel(),column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
					<%
					}else{
					%>
					   <%=manager.generateSetBooleanForNullableKeyStmt(column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
					<%
					}
					if(isEnableDebug) {
    					if(isDynamic){
                        %>
                            query_<%=cid%> = <%=manager.retrieveSQL(talendDynCol.getLabel(),typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
                        <%
                        }else{
                        %>
                            query_<%=cid%> = <%=manager.retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
                        <%
                        }
					}
				if (typeToGenerate.equals("Geometry")){
					counterCol++;
				}
				counterCol++;
				}
				//#############
				%>

				<%dbOutputBeginUtil.generateSetStmt(manager,typeToGenerate, column, counterCol, incomingConnName, cid, NORMAL_TYPE, " + count_");%>
				<%
				if(useStatement || isEnableDebug) {
				    if(isDynamic){
				    %>
					   query_<%=cid%> = <%=manager.retrieveSQL(talendDynCol.getLabel(),typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
				    <%
				    }else{
				    %>
					   query_<%=cid%> = <%=manager.retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
				    <%
				    }
				}
				if (typeToGenerate.equals("Geometry")){
					counterCol++;
				}
				counterCol++;
			}
		}
		if(isEnableDebug) {
			%>
			globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
			<%
		}
		%>
		<%if(dbOutputBeginUtil.addBatch()) {
			log4jCodeGenerateUtil.defineDataOperationPrefix(node,"Adding");
			%>
			pstmt_<%=cid %>.addBatch();
			nb_line_<%=cid%>++;
			<%
			if (useBatchSize && !("").equals(batchSize) && !("0").equals(batchSize)) {
			%>
					batchSizeCounter_<%=cid%>++;
			<%
			}
		}else {
			log4jCodeGenerateUtil.defineDataOperationPrefix(node,"Updating");
		%>
			try {
				nb_line_<%=cid%>++;
				<%if(showSavePoint){%>
					sp_<%=cid %> = conn_<%=cid%>.setSavepoint();
				<%}%>
				updatedCount_<%=cid%> = updatedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
				<%if(showSavePoint){%>
					conn_<%=cid%>.releaseSavepoint(sp_<%=cid %>);
				<%}%>
			} catch(java.lang.Exception e_<%=cid%>) {
				<%if(showSavePoint){%>
					conn_<%=cid%>.rollback(sp_<%=cid %>);
				<%}%>
				whetherReject_<%=cid%> = true;
				<%
				if (("true").equals(dieOnError)) {
					log4jCodeGenerateUtil.logError(node,"fatal","e_"+cid);
					%>
					throw(e_<%=cid%>);
					<%
				} else {
					log4jCodeGenerateUtil.logError(node,"error","e_"+cid);
					if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
					%>
						<%=rejectConnName %> = new <%=rejectConnName %>Struct();
						<%
						for(IMetadataColumn column : columnList) {
						%>
							<%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
						<%
						}
						%>
						rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
						<%=rejectConnName%>.errorCode = ((java.sql.SQLException)e_<%=cid%>).getSQLState();
						<%=rejectConnName%>.errorMessage = e_<%=cid%>.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
					<%
					} else {
					%>
						System.err.print(e_<%=cid%>.getMessage());
					<%
					}
				}
				%>
			}
		<%
		}
	} else if (("INSERT_OR_UPDATE").equals(dataAction)) {
		int columnIndex = 1;
		for(Column column : colStruct) {
			if(column.isUpdateKey()) {
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
				//#############for feature:2880 and 6980
				if(whereSupportNull && column.getColumn().isNullable()) { %>
					<%=manager.generateSetBooleanForNullableKeyStmt(column, columnIndex, incomingConnName, cid, NORMAL_TYPE)%>
				<%
					columnIndex++;
				}
				//#############
				if(!useStatement){%>
					<%dbOutputBeginUtil.generateSetStmt(manager,typeToGenerate, column, columnIndex, incomingConnName, cid, NORMAL_TYPE);%>
				<%
				}else{
				%>
					query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , columnIndex, "checkExistSQLSplits_")%>;
				<%
				}
				if (typeToGenerate.equals("Geometry"))
				columnIndex++;
				columnIndex++;
			}
		}
		%>
		<%if(useStatement){%>
			java.sql.ResultSet rs_<%=cid%> = pstmt_<%=cid %>.executeQuery(query_<%=cid%>.toString().trim());
			query_<%=cid%> = new StringBuffer("");
		<%}else{%>
			java.sql.ResultSet rs_<%=cid%> = pstmt_<%=cid %>.executeQuery();
		<%}%>
		int checkCount_<%=cid%> = -1;
		while(rs_<%=cid%>.next()) {
			checkCount_<%=cid%> = rs_<%=cid%>.getInt(1);
		}
		if(checkCount_<%=cid%> > 0) {
			<%
			int counterCol = 1;
			for(Column column : colStruct) {
				if(column.isUpdatable()) {
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
					if(!useStatement){
					%>
						<%dbOutputBeginUtil.generateSetStmt(manager,typeToGenerate, column, counterCol, incomingConnName, cid, UPDATE_TYPE);%>
					<%
					}
					if(useStatement || isEnableDebug) {
					%>
						query_<%=cid%> = <%=manager.retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
					<%
					}
					counterCol++;
				}
			}
			if(isDynamic) {
				Column dynamicColumn = getColumn(talendDynCol);
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
				if("Dynamic".equals(typeToGenerate)) {
				if(useStatement || isEnableDebug) {
                %>
                    routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counterCol%>,updateSQLSplits_<%=cid%>);
                <%
                }
                %>
					int count_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtUpdate_<%=cid%>, <%=counterCol-1%>, "<%=dbmsId%>");
				<%
				}
			}
			for(Column column : colStruct) {
				if(column.isUpdateKey()) {
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
					//#############for feature:2880
					if(whereSupportNull && column.getColumn().isNullable()) { 
                        if(isDynamic){
                        %>
                            <%=manager.generateSetBooleanForNullableKeyStmt(talendDynCol.getLabel(),column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
                        <%
                        }else{
                        %>
                        	<%=manager.generateSetBooleanForNullableKeyStmt(column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
                        <%
                        }
						if(isEnableDebug) {
    						if(isDynamic){
                            %>
        						query_<%=cid%> = <%=manager.retrieveSQL(talendDynCol.getLabel(),typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
                            <%
                            }else{
                            %>
        						query_<%=cid%> = <%=manager.retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
                            <%
                            }
						}
						if (typeToGenerate.equals("Geometry"))
							counterCol++;
						counterCol++;
					}
					//#############
					if(!useStatement){
						dbOutputBeginUtil.generateSetStmt(manager,typeToGenerate, column, counterCol, incomingConnName, cid, UPDATE_TYPE, " + count_");
					}
					if(useStatement || isEnableDebug) {
						
						if(isDynamic){
				   		%>
							query_<%=cid%> = <%=manager.retrieveSQL(talendDynCol.getLabel(),typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
				    	<%
				    	}else{
				    	%>
							query_<%=cid%> = <%=manager.retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
				    	<%
				    	}
				    }
					counterCol++;
				}
			}
			if(isEnableDebug) {
			%>
				globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
			<%
			}
			log4jCodeGenerateUtil.defineDataOperationPrefix(node,"Updating");
			%>
			try {
				<%if(useStatement){%>
					updatedCount_<%=cid%> = updatedCount_<%=cid%> + pstmtUpdate_<%=cid %>.executeUpdate(query_<%=cid%>.toString().trim());
				<%}else{%>
					<%if(showSavePoint){%>
						sp_<%=cid %> = conn_<%=cid%>.setSavepoint();
					<%}%>
						updatedCount_<%=cid%> = updatedCount_<%=cid%> + pstmtUpdate_<%=cid %>.executeUpdate();
					<%if(showSavePoint){%>
						conn_<%=cid%>.releaseSavepoint(sp_<%=cid %>);
					<%}%>
				<%}%>
			} catch(java.lang.Exception e_<%=cid%>) {
				<%if(showSavePoint){%>
					conn_<%=cid%>.rollback(sp_<%=cid %>);
				<%}%>
				whetherReject_<%=cid%> = true;
				<%
				if (("true").equals(dieOnError)) {
					log4jCodeGenerateUtil.logError(node,"fatal","e_"+cid);
					%>
					throw(e_<%=cid%>);
					<%
				} else {
					log4jCodeGenerateUtil.logError(node,"error","e_"+cid);
					if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
						%>
						<%=rejectConnName %> = new <%=rejectConnName %>Struct();
						<%
						for(IMetadataColumn column : columnList) {
						%>
							<%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
						<%
						}
						%>
						rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
						<%=rejectConnName%>.errorCode = ((java.sql.SQLException)e_<%=cid%>).getSQLState();
						<%=rejectConnName%>.errorMessage = e_<%=cid%>.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
						<%
					} else {
						%>
						System.err.print(e_<%=cid%>.getMessage());
						<%
					}
				}
				%>
			}
		} else {
			<%
			int counterInsert = 1;
			for(Column columnInsert : colStruct) {
				if(columnInsert.isInsertable()) {
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnInsert.getColumn().getTalendType(), columnInsert.getColumn().isNullable());
					if(!useStatement){
					%>
						<%dbOutputBeginUtil.generateSetStmt(manager,typeToGenerate, columnInsert, counterInsert, incomingConnName, cid, INSERT_TYPE);%>
					<%
					}
					if(useStatement || isEnableDebug) {
					%>
						query_<%=cid%> = <%=manager.retrieveSQL(typeToGenerate, columnInsert, incomingConnName, cid, "query_" ,  counterInsert, "insertSQLSplits_")%>;
					<%
					}
					if (typeToGenerate.equals("Geometry"))
						counterInsert++;
					counterInsert++;
				}
			}
			if(isDynamic) {
				Column dynamicColumn = getColumn(talendDynCol);
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
				if("Dynamic".equals(typeToGenerate)) {
					if(useStatement || isEnableDebug) {
    				%>
						routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counterInsert%>,insertSQLSplits_<%=cid%>);
                	<%
    				}
				%>
					DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtInsert_<%=cid%>, <%=counterInsert-1%>, "<%=dbmsId%>");
				<%
				}
			}
			if(isEnableDebug) {
			%>
				globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
			<%
			}
			log4jCodeGenerateUtil.defineDataOperationPrefix(node,"Inserting");
			%>
			try {
				<%if(useStatement){%>
					insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate(query_<%=cid%>.toString());
				<%}else{%>
					<%if(showSavePoint){%>
						sp_<%=cid %> = conn_<%=cid%>.setSavepoint();
					<%}%>
					insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate();
					<%if(showSavePoint){%>
						conn_<%=cid%>.releaseSavepoint(sp_<%=cid %>);
					<%}%>
				<%}%>
			} catch(java.lang.Exception e_<%=cid%>) {
				<%if(showSavePoint){%>
					conn_<%=cid%>.rollback(sp_<%=cid %>);
				<%}%>
				whetherReject_<%=cid%> = true;
				<%
				if (("true").equals(dieOnError)) {
					log4jCodeGenerateUtil.logError(node,"fatal","e_"+cid);
					%>
					throw(e_<%=cid%>);
				<%
				} else {
				   log4jCodeGenerateUtil.logError(node,"error","e_"+cid);
					if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
					%>
						<%=rejectConnName %> = new <%=rejectConnName %>Struct();
						<%
						for(IMetadataColumn column : columnList) {
						%>
							<%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
						<%
						}
						%>
						rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
						<%=rejectConnName%>.errorCode = ((java.sql.SQLException)e_<%=cid%>).getSQLState();
						<%=rejectConnName%>.errorMessage = e_<%=cid%>.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
					<%
					} else {
					%>
						System.err.print(e_<%=cid%>.getMessage());
					<%
					}
				}
				%>
			}
		}
		nb_line_<%=cid%>++;

		<%
	} else if (("UPDATE_OR_INSERT").equals(dataAction)) {
		%>
		int updateFlag_<%=cid%> = 0;
		<%
		int counterColUpdate = 1;
		for(Column columnUpdate : colStruct) {
			if(columnUpdate.isUpdatable()) {
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnUpdate.getColumn().getTalendType(), columnUpdate.getColumn().isNullable());
				if(!useStatement){
				%>
					<%dbOutputBeginUtil.generateSetStmt(manager,typeToGenerate, columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE);%>
				<%
				}
				if(useStatement || isEnableDebug) {
					%>
					query_<%=cid%> = <%=manager.retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_")%>;
					<%
				}
				if (typeToGenerate.equals("Geometry"))
					counterColUpdate++;
				counterColUpdate++;
			}
		}
		if(isDynamic) {
			Column dynamicColumn = getColumn(talendDynCol);
			String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
			if("Dynamic".equals(typeToGenerate)) {
				if(useStatement || isEnableDebug) {
                %>
                    routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counterColUpdate%>,updateSQLSplits_<%=cid%>);
                <%
                }
                %>
				int count_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtUpdate_<%=cid%>, <%=counterColUpdate-1%>, "<%=dbmsId%>");
			<%
			}
		}

		for(Column columnUpdate : colStruct) {
			if(columnUpdate.isUpdateKey()) {
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnUpdate.getColumn().getTalendType(), columnUpdate.getColumn().isNullable());
				//#############for feature:2880 and 6980
				if(whereSupportNull && columnUpdate.getColumn().isNullable()) { 
				    if(isDynamic){
                    %>
    					<%=manager.generateSetBooleanForNullableKeyStmt(talendDynCol.getLabel(),columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE)%>
                    <%
                    }else{
                    %>
    					<%=manager.generateSetBooleanForNullableKeyStmt(columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE)%>
                    <%
                    }
					if(isEnableDebug) {
					   if(isDynamic){
                        %>
                            query_<%=cid%> = <%=manager.retrieveSQL(talendDynCol.getLabel(),typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_", "(("+incomingConnName+"."+columnUpdate.getName()+"==null)?1:0)")%>;
					   <%
					   }else{
					   %>
                            query_<%=cid%> = <%=manager.retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_", "(("+incomingConnName+"."+columnUpdate.getName()+"==null)?1:0)")%>;
					   <%
					   }
					}
					if (typeToGenerate.equals("Geometry"))
						counterColUpdate++;
					counterColUpdate++;
				}
				//#############
				if(!useStatement){
				%>
				<%dbOutputBeginUtil.generateSetStmt(manager,typeToGenerate, columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE, " + count_");%>
				<%
				}
				if(useStatement || isEnableDebug) {
					if(isDynamic){
				    %>
                        query_<%=cid%> = <%=manager.retrieveSQL(talendDynCol.getLabel(),typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_")%>;
				    <%
				    }else{
				    %>
                        query_<%=cid%> = <%=manager.retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_")%>;
				    <%
				    }
				}
				if (typeToGenerate.equals("Geometry"))
					counterColUpdate++;
				counterColUpdate++;
			}
		}
		if(isEnableDebug) {
		%>
			globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
		<%
		}
		%>
		try {
			<%log4jCodeGenerateUtil.defineDataOperationPrefix(node,"Updating");%>
			<%if(useStatement){%>
				updateFlag_<%=cid%>=pstmtUpdate_<%=cid %>.executeUpdate(query_<%=cid%>.toString().trim());
			<%}else{%>
				<%if(showSavePoint){%>
					sp_<%=cid %> = conn_<%=cid%>.setSavepoint();
				<%}%>
				updateFlag_<%=cid%>=pstmtUpdate_<%=cid %>.executeUpdate();
				<%if(showSavePoint){%>
					conn_<%=cid%>.releaseSavepoint(sp_<%=cid %>);
				<%}%>
			<%}%>
			updatedCount_<%=cid%> = updatedCount_<%=cid%>+updateFlag_<%=cid%>;
		if(updateFlag_<%=cid%> == 0) {

			<%
			if(useStatement || isEnableDebug) {
			%>
			query_<%=cid%> = new StringBuffer("");
			<%
			}
			int counter = 1;
			for(Column column : colStruct) {
				if(column.isInsertable()) {
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
					if(!useStatement){
					%>
					<%dbOutputBeginUtil.generateSetStmt(manager,typeToGenerate, column, counter, incomingConnName, cid, INSERT_TYPE);%>
					<%
					}
					if(useStatement || isEnableDebug) {
					%>
						query_<%=cid%> = <%=manager.retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
					<%
					}
					if (typeToGenerate.equals("Geometry"))
						counter++;
					counter++;
				}
			}
			if(isDynamic) {
				Column dynamicColumn = getColumn(talendDynCol);
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
				if("Dynamic".equals(typeToGenerate)) {
					if(useStatement || isEnableDebug) {
    				%>
						routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counter%>,insertSQLSplits_<%=cid%>);
                	<%
    				}
					%>
					DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtInsert_<%=cid%>, <%=counter-1%>, "<%=dbmsId%>");
				<%
				}
			}
			if(isEnableDebug) {
			%>
				globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
			<%
			}
			log4jCodeGenerateUtil.defineDataOperationPrefix(node,"Inserting");
			%>
				<%if(useStatement){%>
					insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate(query_<%=cid%>.toString().trim());
				<%}else{%>
					<%if(showSavePoint){%>
						sp_<%=cid %> = conn_<%=cid%>.setSavepoint();
					<%}%>
					insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate();
					<%if(showSavePoint){%>
						conn_<%=cid%>.releaseSavepoint(sp_<%=cid %>);
					<%}%>
				<%}%>
		}
			} catch(java.lang.Exception e_<%=cid%>) {
				<%if(showSavePoint){%>
					conn_<%=cid%>.rollback(sp_<%=cid %>);
				<%}%>
				whetherReject_<%=cid%> = true;
				<%
				if (("true").equals(dieOnError)) {
					log4jCodeGenerateUtil.logError(node,"fatal","e_"+cid);
					%>
					throw(e_<%=cid%>);
				<%
				} else {
					log4jCodeGenerateUtil.logError(node,"error","e_"+cid);
					if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
					%>
						<%=rejectConnName %> = new <%=rejectConnName %>Struct();
						<%
						for(IMetadataColumn column : columnList) {
						%>
							<%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
						<%
						}
						%>
						rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
						<%=rejectConnName%>.errorCode = ((java.sql.SQLException)e_<%=cid%>).getSQLState();
						<%=rejectConnName%>.errorMessage = e_<%=cid%>.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
					<%
					} else {
					%>
						System.err.print(e_<%=cid%>.getMessage());
					<%
					}
				}
				%>
			}
		nb_line_<%=cid%>++;
		<%
	} else if (("DELETE").equals(dataAction)) {
		int keyCounter = 1;
		for(Column column : colStruct) {
			if(column.isDeleteKey()) {
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
				//#############for feature:2880 and 6980
				if(whereSupportNull && column.getColumn().isNullable()) { %>
					<%=manager.generateSetBooleanForNullableKeyStmt(column, keyCounter, incomingConnName, cid, NORMAL_TYPE)%>
					<%
					if(isEnableDebug) {
					%>
						query_<%=cid%> = <%=manager.retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , keyCounter, "deleteSQLSplits_", "(("+incomingConnName+"."+column.getName()+"==null)?1:0)")%>;
					<%
					}
					keyCounter++;
				}
				//#############
				if(!useStatement){
				%>
					<%dbOutputBeginUtil.generateSetStmt(manager,typeToGenerate, column, keyCounter, incomingConnName, cid, NORMAL_TYPE);%>
				<%
				}
				if(useStatement || isEnableDebug) {
					%>
					query_<%=cid%> = <%=manager.retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , keyCounter, "deleteSQLSplits_")%>;
					<%
				}
				keyCounter++;
			}
		}
		if(isEnableDebug) {
			%>
			globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
			<%
		}
		if (dbOutputBeginUtil.addBatch()) {
			log4jCodeGenerateUtil.defineDataOperationPrefix(node,"Adding");
			%>
			pstmt_<%=cid %>.addBatch();
			<%
			if (useBatchSize && !("").equals(batchSize) && !("0").equals(batchSize)) {
			%>
				batchSizeCounter_<%=cid%>++;
			<%
		  	}
		}else {
			log4jCodeGenerateUtil.defineDataOperationPrefix(node,"Deleting");
		%>
			try {
				<%if(useStatement){%>
					deletedCount_<%=cid%> = deletedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate(query_<%=cid%>.toString().trim());
				<%}else{%>
					<%if(showSavePoint){%>
						sp_<%=cid %> = conn_<%=cid%>.setSavepoint();
					<%}%>
					deletedCount_<%=cid%> = deletedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
					<%if(showSavePoint){%>
						conn_<%=cid%>.releaseSavepoint(sp_<%=cid %>);
					<%}%>
				<%}%>
			} catch(java.lang.Exception e_<%=cid%>) {
				<%if(showSavePoint){%>
					conn_<%=cid%>.rollback(sp_<%=cid %>);
				<%}%>
				whetherReject_<%=cid%> = true;
				<%
				if (("true").equals(dieOnError)) {
					log4jCodeGenerateUtil.logError(node,"fatal","e_"+cid);
					%>
					throw(e_<%=cid%>);
					<%
				} else {
					log4jCodeGenerateUtil.logError(node,"error","e_"+cid);
					if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
						%>
						<%=rejectConnName %> = new <%=rejectConnName %>Struct();
						<%
						for(IMetadataColumn column : columnList) {
							%>
							<%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
							<%
						}
						%>
						rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
						<%=rejectConnName%>.errorCode = ((java.sql.SQLException)e_<%=cid%>).getSQLState();
						<%=rejectConnName%>.errorMessage = e_<%=cid%>.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
						<%
					} else {
						%>
						System.err.print(e_<%=cid%>.getMessage());
						<%
					}
				}
				%>
			}
		<%
		}
		%>
		nb_line_<%=cid%>++;
	<%
	}
	dbOutputBeginUtil.dataActionMore(node,colStruct,manager,incomingConnName,rejectColumnList, columnList);
	log4jCodeGenerateUtil.debugRecord(node,columnList,incomingConnName,dbOutputBeginUtil.addBatch() && dbOutputBeginUtil.executeBatch);
	if(outgoingConns != null && outgoingConns.size() > 0) {
		%>
		if(!whetherReject_<%=cid%>) {
		<%
			for(IConnection outgoingConn : outgoingConns) {
				if(rejectConnName == null || (rejectConnName != null && !outgoingConn.getName().equals(rejectConnName))) {
					if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
						%>
						<%=outgoingConn.getName()%> = new <%=outgoingConn.getName()%>Struct();
						<%
						for(IMetadataColumn column : columnList) {
							%>
							<%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
							<%
						}
					}
				}
			}
			%>
		}
	<%
	}
	dbOutputBeginUtil.executeBatch(node);
	dbOutputBeginUtil.commitEvery(node);
}
%>
