<%@ jet 
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	java.util.List
" 
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	
	String cid = node.getUniqueName();
	
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
	
	String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
	
	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
	
	String useBatchSize = ElementParameterParser.getValue(node, "__USE_BATCH_SIZE__");
	
	String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }
    
    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	
	if(!("true").equals(useExistingConn)) {
	    if(!("").equals(commitEvery)&&!("0").equals(commitEvery)){
	        %>
	        conn_<%=cid%>.commit();
	        <%
	    }
	}
    
    if(("INSERT_OR_UPDATE").equals(dataAction)) {
        %>
        if(pstmtUpdate_<%=cid%> != null){

            pstmtUpdate_<%=cid %>.close();
            
        } 
        if(pstmtInsert_<%=cid %> != null){

            pstmtInsert_<%=cid %>.close();
            
        }
        if(pstmt_<%=cid %> != null) {

            pstmt_<%=cid %>.close();
            
        }        
        <%
    } else if(("UPDATE_OR_INSERT").equals(dataAction)) {
        %>
        if(pstmtUpdate_<%=cid%> != null){

            pstmtUpdate_<%=cid %>.close();
            
        } 
        if(pstmtInsert_<%=cid %> != null){

            pstmtInsert_<%=cid %>.close();
            
        }        
        <%
    } else {
  		%>
  		<%if ((rejectConnName==null &&("true").equals(useBatchSize)) && ("INSERT").equals(dataAction)) {
            %>                
            try {
				int countSum_<%=cid%> = 0;
				if (pstmt_<%=cid %> != null) {
					for(int countEach_<%=cid%>: pstmt_<%=cid %>.executeBatch()) {
						if(countEach_<%=cid%> == -2 || countEach_<%=cid%> == -3) {
							break;
						}
						countSum_<%=cid%> += countEach_<%=cid%>;
					}             	
				}
				
	    		insertedCount_<%=cid%> += countSum_<%=cid%>; 
            }catch (java.sql.BatchUpdateException e){
            	<%if(("true").equals(dieOnError)) {
            	%>
            		throw(e);
            	<%
            	}else {
            	%>
            	int countSum_<%=cid%> = 0;
				for(int countEach_<%=cid%>: e.getUpdateCounts()) {
					countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
				}
				
	    		insertedCount_<%=cid%> += countSum_<%=cid%>;
	    		
            	System.out.println(e.getMessage());
            	<%
            	}%>                	
        	}                                  
            <%
            }%>
            
            if(pstmt_<%=cid %> != null) {
    			pstmt_<%=cid %>.close();
            }        
        	<%
    }
    %>
    
<%
	if(!("true").equals(useExistingConn)) {
%>
    conn_<%=cid%> .close();
    resourceMap.put("finish_<%=cid%>", true);
<%
	}
%>

	int rejectedCount_<%=cid%> = 0;
<%@ include file="../templates/DB/Output/DBOutputEndGlobalVars.javajet"%>
