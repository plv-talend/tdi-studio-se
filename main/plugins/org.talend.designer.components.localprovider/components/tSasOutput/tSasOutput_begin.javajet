<%@ jet 
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.MappingTypeRetriever	
    org.talend.core.model.metadata.MetadataTalendType	
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.HashMap
"
skeleton="../templates/db_output_bulk.skeleton"
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode) codeGenArgument.getArgument();
String cid = node.getUniqueName();
String dbmsId = "JDBC";
List<Map<String, String>> addCols =
	(List<Map<String,String>>) ElementParameterParser.getObjectValue(node, "__ADD_COLS__");
boolean useFieldOptions = ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__").equals("true");
List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");
String driverJar = ElementParameterParser.getValue(node, "__DRIVER_JAR__");
String driverClass = ElementParameterParser.getValue(node, "__DRIVER_CLASS__");
String jdbcUrl = ElementParameterParser.getValue(node, "__URL__");
String dbuser = ElementParameterParser.getValue(node, "__USER__");
String tableName = ElementParameterParser.getValue(node, "__TABLE__");
String dataAction = ElementParameterParser.getValue(node, "__DATA_ACTION__");
String clearTable = ElementParameterParser.getValue(node, "__CLEAR_TABLE__");
String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
boolean isEnableDebug = ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__").equals("true");

List<IMetadataColumn> columnList = getColumnList(node);
List<Column> stmtStructure = null;
if(columnList != null && columnList.size() > 0) {
    stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
}    

// Check that a key is defined for UPDATE / DELETE requests
if(dataAction.equals("UPDATE") || dataAction.equals("INSERT_OR_UPDATE") || dataAction.equals("UPDATE_OR_INSERT")) {
    int updateKeyCount = 0;
    if(stmtStructure != null) {
        for(Column column : stmtStructure) {
            if(column.isUpdateKey()) {
                updateKeyCount++;
            }
        }
        %>
        int updateKeyCount_<%=cid%> = <%=updateKeyCount%>;
        if(updateKeyCount_<%=cid%> < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
        <%
    }
} else if(dataAction.equals("DELETE")) {
    int deleteKeyCount = 0;
    if(stmtStructure != null) {
        for(Column column : stmtStructure) {
            if(column.isDeleteKey()) {
                deleteKeyCount++;
            }
        }
        %>
        int deleteKeyCount_<%=cid%> = <%=deleteKeyCount%>;
        if(deleteKeyCount_<%=cid%> < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
        <%
    }
}
%>

int nb_line_<%=cid%> = 0;
int nb_line_update_<%=cid%> = 0;
int nb_line_inserted_<%=cid%> = 0;
int nb_line_deleted_<%=cid%> = 0;
int nb_line_rejected_<%=cid%> = 0;

int deletedCount_<%=cid%> = 0;
int updatedCount_<%=cid%> = 0;
int insertedCount_<%=cid%> = 0;

boolean whetherReject_<%=cid%> = false;

<%
String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
if(useExistingConn.equals("true")){
	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	String conn = "conn_" + connection;
	%>
	java.sql.Connection connection_<%=cid %> = (java.sql.Connection)globalMap.get("<%=conn %>");
	<%
} else {       
    %>
    java.lang.Class.forName(<%=driverClass %>);
    String connectionString_<%=cid %> = <%=jdbcUrl %>;
    
    <%
    String passwordFieldName = "__PASS__";
    %>
    
    <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>      
    
    java.sql.Connection connection_<%=cid %> = java.sql.DriverManager.getConnection(connectionString_<%=cid %>, <%=dbuser %>, decryptedPassword_<%=cid%>);
	resourceMap.put("conn_<%=cid%>", connection_<%=cid %>);
    <%
}
// Commit every
if(!useExistingConn.equals("true")) {
    if (!commitEvery.equals("") && !commitEvery.equals("0")) {
        %>
//        connection_<%=cid%>.setAutoCommit(false);
        int commitEvery_<%=cid%> = <%=commitEvery%>;
        int commitCounter_<%=cid%> = 0;         
        <%
    }
}	
%>
<%
// Clear table
if (clearTable.equals("true")) {
	%>
	java.sql.Statement statementClear_<%=cid%> = connection_<%=cid%>.createStatement();
	deletedCount_<%=cid%> = deletedCount_<%=cid%> + statementClear_<%=cid%>.executeUpdate("delete from " + <%=tableName%>);
	<%
}

if (columnList != null && columnList.size() > 0) {
    Map<String, StringBuilder> actionSQLMap = getManager(dbmsId, cid).createProcessSQL(stmtStructure);
    StringBuilder insertColName = actionSQLMap.get(INSERT_COLUMN_NAME);   
    StringBuilder insertValueStmt = actionSQLMap.get(INSERT_VALUE_STMT);    
    StringBuilder updateSetStmt = actionSQLMap.get(UPDATE_SET_STMT);    
    StringBuilder updateWhereStmt = actionSQLMap.get(UPDATE_WHERE_STMT);
    StringBuilder deleteWhereStmt = actionSQLMap.get(DELETE_WHERE_STMT);		
	// Build SQL statements
	if (dataAction.equals("INSERT")) {
		%>
		String insert_<%=cid%> = "INSERT INTO " + <%=tableName%> + " (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
		java.sql.PreparedStatement pstmt_<%=cid%> = connection_<%=cid%>.prepareStatement(insert_<%=cid%>);
		<%
	} else if (dataAction.equals("UPDATE")) {
		%>
		String update_<%=cid%> = "UPDATE " + <%=tableName%> + " SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
		java.sql.PreparedStatement pstmt_<%=cid%> = connection_<%=cid%>.prepareStatement(update_<%=cid%>);
		<%
	} else if (dataAction.equals("INSERT_OR_UPDATE")) {
		%>
		java.sql.PreparedStatement pstmt_<%=cid%> = connection_<%=cid%>.prepareStatement("SELECT COUNT(1) FROM " + <%=tableName%> + " WHERE <%=updateWhereStmt.toString()%>");
		String insert_<%=cid%> = "INSERT INTO " + <%=tableName%> + " (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
		java.sql.PreparedStatement pstmtInsert_<%=cid%> = connection_<%=cid%>.prepareStatement(insert_<%=cid%>);
		String update_<%=cid%> = "UPDATE " + <%=tableName%> + " SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
		java.sql.PreparedStatement pstmtUpdate_<%=cid%> = connection_<%=cid%>.prepareStatement(update_<%=cid%>);
		<%
	} else if (dataAction.equals("UPDATE_OR_INSERT")) {
		%>
		String update_<%=cid%> = "UPDATE " + <%=tableName%> + " SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
		java.sql.PreparedStatement pstmtUpdate_<%=cid%> = connection_<%=cid%>.prepareStatement(update_<%=cid%>);
		String insert_<%=cid%> = "INSERT INTO " + <%=tableName%> + " (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
		java.sql.PreparedStatement pstmtInsert_<%=cid%> = connection_<%=cid%>.prepareStatement(insert_<%=cid%>);
		<%
	} else if (dataAction.equals("DELETE")) {
		%>
		String delete_<%=cid%> = "DELETE  FROM " + <%=tableName%> + " WHERE <%=deleteWhereStmt.toString()%>";
		java.sql.PreparedStatement pstmt_<%=cid%> = connection_<%=cid%>.prepareStatement(delete_<%=cid%>);
		<%
	}
    if(isEnableDebug) {
        %>
        StringBuffer query_<%=cid%> = null;
       	<%@ include file="../templates/DB/Output/splitSQLForAllDBInBegin.javajet" %>
        <%
    }
}
%>

