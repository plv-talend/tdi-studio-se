<%@ jet 
imports="
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.MappingTypeRetriever
    org.talend.core.model.metadata.MetadataTalendType    
    org.talend.core.model.process.IConnectionCategory    
    java.util.List
    java.util.ArrayList
    java.util.Map
    java.util.HashMap
"
skeleton="../templates/db_output_bulk.skeleton"
%>

<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();    
    String cid = node.getUniqueName();
        
    String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
    String tableName = ElementParameterParser.getValue(node,"__TABLE__");
	String table = ElementParameterParser.getValue(node,"__TABLE__");	
	String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
    String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
    
    //feature:2880
    getManager(dbmsId, cid, node);//register the MSSQLManager
    boolean whereSupportNull = ElementParameterParser.getValue(node, "__SUPPORT_NULL_WHERE__").equals("true");
    
    List<Map<String, String>> addCols =
            (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__");

    boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));
    
    List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");    
    
    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
    
    boolean useExistingConnection = "true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
    boolean isEnableDebug = ("true").equals(ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__"));
	boolean ignoreDateOutofRange = ("true").equals(ElementParameterParser.getValue(node,"__IGNORE_DATE_OUTOF_RANGE__"));
    
     String useBatchSize = ElementParameterParser.getValue(node, "__USE_BATCH_SIZE__");
     
    String batchSize =ElementParameterParser.getValue(node, "__BATCH_SIZE__");
    
    String identityInsert = ElementParameterParser.getValue(node, "__IDENTITY_INSERT__");
    
    String incomingConnName = null;
    
    List<IMetadataColumn> columnList = getColumnList(node);
    
    List< ? extends IConnection> conns = node.getIncomingConnections();
    if(conns!=null && conns.size()>0){
        IConnection conn = conns.get(0);
        incomingConnName = conn.getName();
    }
    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }
    List<IMetadataColumn> rejectColumnList = null;
    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
    if(metadataTable != null) {
        rejectColumnList = metadataTable.getListColumns();      
    }
    
    List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
    for(IConnection conn : outgoingConns) {
        if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
            %>        
            <%=conn.getName() %> = null;            
            <%      
        }
    }
    
	Manager manager = null;
	boolean isDynamic = false;
	IMetadataColumn talendDynCol = null;
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {
		IMetadataTable metadata = metadatas.get(0);
		isDynamic = metadata.isDynamicSchema(); 
	}
	
	List<Column> stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
    isDynamic = isDynamic && !getManager(dbmsId, cid).isDynamicColumnReplaced();
    
    ////////////////////////////////////////////////////////////
    List<Column> colStruct =  new ArrayList();
    for(Column colStmt : stmtStructure) {
	    if (!colStmt.isReplaced()&&!colStmt.isAddCol()&&!colStmt.isDynamic()) { 
	 		 colStruct.add(colStmt);                  
	 	} else if ( colStmt.isReplaced() ) { 
 		     List <Column> replacements = colStmt.getReplacement() ;          
	 		 for (int i=0; i < replacements.size() ; i++) { 
	 		      Column columnTest =columnTest = replacements.get(i); 
	 		      String sqlExpression = columnTest.getSqlStmt(); 
	 		      if (sqlExpression.contains("?")) { 
	 		            colStruct.add(colStmt); 
	 		      } 
	 		 } 
	 	}  

    }
    
    class SingleInsertQueryOperation{
        public String generateType(String typeToGenerate){
            if(("byte[]").equals(typeToGenerate)){
                typeToGenerate = "Bytes";
            }else if(("java.util.Date").equals(typeToGenerate)){
                typeToGenerate = "Date";
            }else if(("Integer").equals(typeToGenerate)){
                typeToGenerate = "Int";
            }else if(("List").equals(typeToGenerate)){  
                typeToGenerate = "Object";                 
            }else{
                typeToGenerate=typeToGenerate.substring(0,1).toUpperCase()+typeToGenerate.substring(1);
            }
            return typeToGenerate;
        }
        
        public void generateSetStmt(String typeToGenerate, Column column, String incomingConnName, String cid,boolean ignoreDateOutofRange,String dbmsId){
            boolean isObject = false;                               
            String prefix = "pstmt_";                             
            %>
    
            <%
            if(("Character").equals(typeToGenerate)){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.CHAR);
                    <%
            }else if(("Date").equals(typeToGenerate)){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.DATE);
                    <%
            }else if(("byte[]").equals(typeToGenerate)){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.ARRAY);         
                    <%
            }else if(("Long").equals(typeToGenerate)||("Byte").equals(typeToGenerate)||("Integer").equals(typeToGenerate)||("Short").equals(typeToGenerate)){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.INTEGER);
                    <%
            }else if(("String").equals(typeToGenerate)){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.VARCHAR);
                    <%
            }else if(("Object").equals(typeToGenerate)){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.OTHER);
                    <%
            }else if(("Boolean").equals(typeToGenerate)){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.BOOLEAN);   
                    <%
            }else if(("Double").equals(typeToGenerate)){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.DOUBLE);    
                    <%
            }else if(("Float").equals(typeToGenerate)){
                isObject = true;
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.FLOAT); 
                    <%
            }
            if(isObject){
                %>
                }else{
                <%
            }
            typeToGenerate = generateType(typeToGenerate);
        
            if(("Char").equals(typeToGenerate)||("Character").equals(typeToGenerate)){
                %>
                <%
                if(isObject) {
                    %>
                    if(<%=incomingConnName%>.<%=column.getName()%>==null){
                    <%
                } else {
                    %>
                    if(("null").equals(String.valueOf(<%=incomingConnName%>.<%=column.getName()%>).toLowerCase())){
                    <%
                }
                %>
                <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.CHAR);
            
                }else if(<%=incomingConnName%>.<%=column.getName()%> == '\0'){
        
                    <%=prefix+cid%>.setString(counter<%=cid%>,"");
            
                }else{
            
                    <%=prefix+cid%>.setString(counter<%=cid%>,String.valueOf(<%=incomingConnName%>.<%=column.getName()%>));
                }
                <%
            }else if(("Date").equals(typeToGenerate)){
                %>
                if(<%=incomingConnName%>.<%=column.getName()%>!=null){
                    // timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
                    date_<%=cid %> = <%=incomingConnName%>.<%=column.getName()%>.getTime();
                    if (date_<%=cid %> < year1_<%=cid %> || date_<%=cid %> >= year10000_<%=cid %>) {
                        <%=prefix+cid%>.setString(counter<%=cid%>, "0000-00-00 00:00:00");
                	}else{
                <%
                String dbType = column.getColumn().getType();
				if(dbType==null || "".equals(dbType.trim())){
					MappingTypeRetriever mappingType = MetadataTalendType.getMappingTypeRetriever(dbmsId);
					dbType = mappingType.getDefaultSelectedDbType(column.getColumn().getTalendType());
				}
                if(ignoreDateOutofRange){
                	if(("DATE".equals(dbType) || "DATETIME2".equals(dbType))){
                		String pattern = column.getColumn().getPattern();
                %>
                    	<%=prefix+cid%>.setString(counter<%=cid%>,TalendDate.formatDate(<%=pattern%>, <%=incomingConnName%>.<%=column.getName()%>));
				<%
				    } else if("DATETIMEOFFSET".equals(dbType)) {
				%>
						<%=prefix+cid%>.setString(counter<%=cid%>,TalendDate.formatDatetimeoffset(<%=incomingConnName%>.<%=column.getName()%>));
				<%
					}else{
				%>
                		<%=prefix+cid%>.setTimestamp(counter<%=cid%>, new java.sql.Timestamp(date_<%=cid %>));
				<%
					}
                } else {
					if("DATETIMEOFFSET".equals(dbType)){%>
                        <%=prefix+cid%>.setTimestamp(counter<%=cid%>, new java.sql.Timestamp(date_<%=cid %>),calendar_datetimeoffset_<%=cid%>);
                	<%} else {%>
                		<%=prefix+cid%>.setTimestamp(counter<%=cid%>, new java.sql.Timestamp(date_<%=cid %>));
                	<%}
				}
				%>
                    }
                }else{
        
                    <%=prefix+cid%>.setNull(counter<%=cid%>,java.sql.Types.DATE);
            
                }
                <%
            }else{
                %>
                <%=prefix+cid%>.set<%=typeToGenerate%>(counter<%=cid%>,<%=incomingConnName%>.<%=column.getName()%>);
                <%
            }
            if(isObject){
                %>
            
                }
        
            <%
            }
        }
    }
    
    
    
	if(isEnableDebug) {
%>
		query_<%=cid%> = new StringBuffer("");
<%
	}
	
	if(isDynamic) {
	%>
		if(nb_line_<%=cid%>==0) {
		<%
			if(columnList != null && columnList.size()>0) {    
   %>
   <%@ include file="../templates/_tableActionForOutput.javajet"%>
   <%
    Map<String, StringBuilder> actionSQLMap = getManager(dbmsId, cid).createProcessSQL(stmtStructure);
    StringBuilder insertColName = actionSQLMap.get(INSERT_COLUMN_NAME);   
    StringBuilder insertValueStmt = actionSQLMap.get(INSERT_VALUE_STMT);    
    StringBuilder updateSetStmt = actionSQLMap.get(UPDATE_SET_STMT);    
    StringBuilder updateWhereStmt = actionSQLMap.get(UPDATE_WHERE_STMT);
    StringBuilder deleteWhereStmt = actionSQLMap.get(DELETE_WHERE_STMT);
	talendDynCol = getDynamicColumn();
    if(("INSERT").equals(dataAction)) {
		List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
		if(conns_dynamic!=null && conns_dynamic.size()>0){
			IConnection conn = conns_dynamic.get(0);
			if(!("".equals(insertColName.toString()))) {
%>
				String insert_<%=cid%> = "INSERT INTO [" + tableName_<%=cid%> + "] (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES (<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
<%			} else {
%>
				String insert_<%=cid%> = "INSERT INTO [" + tableName_<%=cid%> + "] ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES ("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
<%
			}
		}
        %>  
        //String insert_<%=cid%> = "INSERT INTO [" + tableName_<%=cid%> + "] (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
<%
//to fixed: bug8422
if(!(cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){%>
        pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
<%}%>
        
<%
//to fixed: bug8422
if((cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){ %>
		pstmt_<%=cid %> = null;         
        // [%connection%][psmt][tableName]
        String keyPsmt_<%=cid %> = conn_<%=cid%> + "[psmt]" + "[" + <%=table%> + "]";
		if(GlobalResource.resourceMap.get(keyPsmt_<%=cid %>)== null){
			pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);		
			GlobalResource.resourceMap.put(keyPsmt_<%=cid %>, pstmt_<%=cid %>);
		}else{
			pstmt_<%=cid %> = (java.sql.PreparedStatement)GlobalResource.resourceMap.get(keyPsmt_<%=cid %>);				
		}
<%}%>

    <%   
    } else if (("UPDATE").equals(dataAction)) {
		List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
		if(conns_dynamic!=null && conns_dynamic.size()>0){
			IConnection conn = conns_dynamic.get(0);
			if(!("".equals(updateSetStmt.toString()))) {
	%>
				String update_<%=cid%> = "UPDATE [" + tableName_<%=cid%> + "] SET <%=updateSetStmt.toString()%>, "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%			} else {
%>
				String update_<%=cid%> = "UPDATE [" + tableName_<%=cid%> + "] SET "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%
			}
		}
        %>
        pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
        <%      
    } else if (("INSERT_OR_UPDATE").equals(dataAction)) {
		List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
		if(conns_dynamic!=null && conns_dynamic.size()>0){
			IConnection conn = conns_dynamic.get(0);
			if(!("".equals(insertColName.toString()))) {
%>
				String insert_<%=cid%> = "INSERT INTO [" + tableName_<%=cid%> + "] (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES (<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
<%			} else {
%>
				String insert_<%=cid%> = "INSERT INTO [" + tableName_<%=cid%> + "] ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES ("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
<%
			}
			if(!("".equals(updateSetStmt.toString()))) {
%>
				String update_<%=cid%> = "UPDATE [" + tableName_<%=cid%> + "] SET <%=updateSetStmt.toString()%>, "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%			} else {
%>
				String update_<%=cid%> = "UPDATE [" + tableName_<%=cid%> + "] SET "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%
			}
		}
        %>
        pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("SELECT COUNT(1) FROM [" + tableName_<%=cid%> + "] WHERE <%=updateWhereStmt.toString()%>"); 
        pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
        pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);    
        <%
    } else if (("UPDATE_OR_INSERT").equals(dataAction)) {
		List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
		if(conns_dynamic!=null && conns_dynamic.size()>0){
			IConnection conn = conns_dynamic.get(0);
			if(!("".equals(insertColName.toString()))) {
%>
				String insert_<%=cid%> = "INSERT INTO [" + tableName_<%=cid%> + "] (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES (<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
<%			} else {
%>
				String insert_<%=cid%> = "INSERT INTO [" + tableName_<%=cid%> + "] ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES ("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
<%
			}
			if(!("".equals(updateSetStmt.toString()))) {
%>
				String update_<%=cid%> = "UPDATE [" + tableName_<%=cid%> + "] SET <%=updateSetStmt.toString()%>, "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%			} else {
%>
				String update_<%=cid%> = "UPDATE [" + tableName_<%=cid%> + "] SET "+DynamicUtils.getUpdateSet(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+" WHERE <%=updateWhereStmt.toString()%>";
<%
			}
		}
        %>
        pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
        pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);        
        <%            
    } else if (("DELETE").equals(dataAction)) {
        %>
        String delete_<%=cid%> = "DELETE FROM [" + tableName_<%=cid%> + "] WHERE <%=deleteWhereStmt.toString()%>";
         <%
            if(isDynamic){
        %>
        pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(delete_<%=cid%>);
        <%
            }else{
        %>
        java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(delete_<%=cid%>);
        <%      
            }   
    } else if (("INSERT_IF_NOT_EXIST").equals(dataAction)) {
		List< ? extends IConnection> conns_dynamic = node.getIncomingConnections();
		if(conns_dynamic!=null && conns_dynamic.size()>0){
			IConnection conn = conns_dynamic.get(0);
			if(insertColName!=null) {
%>
				String insert_<%=cid%> = "INSERT INTO [" + tableName_<%=cid%> + "] (<%=insertColName.toString()%>, "+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES (<%=insertValueStmt.toString()%>, "+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
<%			} else {
%>
				String insert_<%=cid%> = "INSERT INTO [" + tableName_<%=cid%> + "] ("+DynamicUtils.getInsertIntoStmtColumnsList(<%=conn.getName()%>.<%=getDynamicColumn()%>, "<%=dbmsId %>")+") VALUES ("+DynamicUtils.getInsertIntoStmtValuesList(<%=conn.getName()%>.<%=getDynamicColumn()%>)+")";
<%
			}
		}
    	%>
        pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("SELECT COUNT(1) FROM [" + tableName_<%=cid%> + "] WHERE <%=updateWhereStmt.toString()%>"); 
        pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
    <%
    }
    if(isEnableDebug) {
        %>
       	<%@ include file="../templates/DB/Output/splitSQLForAllDBInDynamicMain.javajet" %>
        <%
    }
}
		%>
		}
	<%
	} //end isDynamic
	
	boolean isParallelize ="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__PARALLELIZE__"));
	
	if (isParallelize) { // bug0014422
		String tAsyncIn_cid = "";
		if(conns!=null && conns.size() > 0) {
			tAsyncIn_cid = conns.get(0).getSource().getUniqueName();
		}
		if(!useExistingConnection) {
	    	if(!("").equals(commitEvery)&&!("0").equals(commitEvery)) {
%>
				commitEvery_<%=cid%> = buffersSize_<%=tAsyncIn_cid%>;
<%
	    	}
    	}
    	
    	if (("true").equals(useBatchSize)) {
		    if(!("").equals(batchSize)&&!("0").equals(batchSize)) {
%>
				batchSize_<%=cid%> = buffersSize_<%=tAsyncIn_cid%>;
<%
		    }
    	}
%>

		
<%
	}

    if(incomingConnName != null && columnList != null){
    	if(("true").equals(identityInsert) && useExistingConnection ) {
        %>
		if ( isShareIdentity_<%=cid%> ) {
        	stmt_<%=cid %>.execute("SET IDENTITY_INSERT ["+ tableName_<%=cid%> +"] ON");
        }
        <%
   		 } 
        %>
        whetherReject_<%=cid%> = false;
        <%    
        if(("INSERT").equals(dataAction)) {
            int counter = 1;   
              
            //start issue0010403 date type     
			if (rejectConnName != null) {
%>
            try {
<%
			}//end issue0010403 date type
			
            for(Column column : colStruct) {
                if(column.isInsertable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate,String.valueOf(ignoreDateOutofRange), column, counter, incomingConnName, cid, NORMAL_TYPE,null)%>
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
                        <%
                    }                    
                    counter++;                        
                }
            }
			if(isDynamic) {
				Column dynamicColumn = getColumn(talendDynCol);
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
				if(isEnableDebug) {
                %>
                    routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counter%>,insertSQLSplits_<%=cid%>);
                <%
                }
				if("Dynamic".equals(typeToGenerate)) {
				%>
					DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmt_<%=cid%>, <%=counter-1%>, "<%=dbmsId%>");
				<%
				}
			}
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
            }            
            %>
            
            <%
            	/////////////use batch
            if (rejectConnName == null  &&("true").equals(useBatchSize)) { // modification one
    		%>
    		pstmt_<%=cid %>.addBatch();
    		nb_line_<%=cid%>++;    		 
			
    		 <%if (("true").equals(useBatchSize) && !("").equals(batchSize) && !("0").equals(batchSize)) {
    		  %>
    		  batchSizeCounter_<%=cid%>++;
    		  <%
    		  }%>    		
    		<%
    		}else {    		
    		%>
<%				
				//start issue0010403 date type
				if (rejectConnName == null) {
%>
            try {
<%
				}//end issue0010403 date type
%>    
                nb_line_<%=cid%>++;
                insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
            } catch(java.lang.Exception e) {
                whetherReject_<%=cid%> = true;
                <%
                if (("true").equals(dieOnError)) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                        <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                        <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                        <%
                    } else {
                        %>
                        System.err.println(e.getMessage());
                        <%
                    }
                } 
                %>
            }
           <%}///end use batch%>
        <%
		    } else if("SINGLE_INSERT".equals(dataAction)){
		    	SingleInsertQueryOperation siOperation = new SingleInsertQueryOperation(); 
		        int insertableCount = 0;
		        for(Column column : colStruct) {
		            if(column.isInsertable()) {
		                insertableCount++;
		            }
		        }
		        if(!isDynamic) {
		     %>
		     	int counter<%=cid%> = rowCount<%=cid%> * <%=insertableCount%> + 1;
		     	
		     	 <%
				}   
		                for(Column column : colStruct) {
		                    if(column.isInsertable()) {
		                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
		                        siOperation.generateSetStmt(typeToGenerate,column,incomingConnName,cid,ignoreDateOutofRange,dbmsId);
		                        %>
		                        counter<%=cid%>++;
		                        <%
		                    }
		                }
						if(isDynamic) {
				Column dynamicColumn = getColumn(talendDynCol);
							String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
							if("Dynamic".equals(typeToGenerate)) {
							%>
								int count_dyn_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmt_<%=cid%>, counter<%=cid%>-1, "<%=dbmsId%>");
								counter<%=cid%>+=count_dyn_<%=cid%>;
							<%
							}
						}
		                %>
		             
		                sInsertColValue<%=cid%> = new BufferLine_<%=cid%>(
		                <% 
		                int count =0;
		                for(Column column : colStruct) {
		                    if(column.isInsertable()) {
		                        if(count != 0) {
		                            %>
		                            ,
		                            <%
		                        }                        
		                        %>
		                        <%=incomingConnName%>.<%=column.getName()%>              
		                        <%                        
		                        count++;                    
		                    }   
		                }
				if(isDynamic) {
					Column dynamicColumn = getColumn(talendDynCol);
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
					if("Dynamic".equals(typeToGenerate)) {
					%>
						, <%=incomingConnName%>.<%=dynamicColumn.getName()%>
					<%
					}
				    }
		                %>  
		                ); 
		               
		                sInsertColValueList<%=cid%>.add(sInsertColValue<%=cid%>);
		    
		                rowCount<%=cid%>++;
		<%
				if(isDynamic) {
		%>
					nb_line_<%=cid%>++;
		<%
				}
		%>	         
		                if(rowCount<%=cid%> == <%=batchSize%>){ 
		                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
		                    sInsertColValueList<%=cid%>.clear();
		                    rowCount<%=cid%> = 0;
		                    counter<%=cid%>=1;
		                }   
		    
		    	
			
			
     <%  }else if(("UPDATE").equals(dataAction)) {
            int counterCol = 1;
            
            //start issue0010403 date type     
			if (rejectConnName != null) {
%>
            try {
<%
			}//end issue0010403 date type
			
            for(Column column : colStruct) {
                if(column.isUpdatable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate,String.valueOf(ignoreDateOutofRange), column, counterCol, incomingConnName, cid, NORMAL_TYPE,null)%>
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                        <%
                    }                    
                    counterCol++;                   
                }
            }
			if(isDynamic) {
				Column dynamicColumn = getColumn(talendDynCol);
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
				if("Dynamic".equals(typeToGenerate)) {
					if(isEnableDebug) {
					%>
						routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counterCol%>,updateSQLSplits_<%=cid%>);
					<%
					}
                
				%>
					int count_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmt_<%=cid%>, <%=counterCol-1%>, "<%=dbmsId%>");
				<%
				}
			}
    
            for(Column column : colStruct) {
                if(column.isUpdateKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
					//#############for feature:2880
					if(whereSupportNull && column.getColumn().isNullable()) {
						if(isDynamic){
						%>
							<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(talendDynCol.getLabel(),column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
						<%
						}else{
						%>
							<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, counterCol, incomingConnName, cid, NORMAL_TYPE)%>
						<%
						}
						if(isEnableDebug) {
							if(isDynamic){
							%>
								query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(talendDynCol.getLabel(),typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "("+incomingConnName+"."+column.getName()+"==null)")%>;
							<%
							}else{
							%>
								query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "("+incomingConnName+"."+column.getName()+"==null)")%>;
							<%
							}
						}
                    	counterCol++;
                       }
                     //#############                      
                    %>                
                    
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate,String.valueOf(ignoreDateOutofRange), column, counterCol, incomingConnName, cid, NORMAL_TYPE, " + count_")%>
                    <%
                    if(isEnableDebug) {
						if(isDynamic){
						%>
							query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(talendDynCol.getLabel(),typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
						<%
						}else{
						%>
							query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
						<%
						}
                    }                    
                    counterCol++;
                }
            }
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
            }            
            %>
            
            <%if(rejectConnName == null &&("true").equals(useBatchSize) ) {
    		%>
    		pstmt_<%=cid %>.addBatch();
    		nb_line_<%=cid%>++;
    		<%if (("true").equals(useBatchSize) && !("").equals(batchSize) && !("0").equals(batchSize)) {
    		%>
    		batchSizeCounter_<%=cid%>++;
    		<%
    		}%>    		    		
    		<%
    		}else {
    		%>
<%				
				//start issue0010403 date type
				if (rejectConnName == null) {
%>
            try {
<%
				}//end issue0010403 date type
%>   
                nb_line_<%=cid%>++;
                updatedCount_<%=cid%> = updatedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
            } catch(java.lang.Exception e) {
                whetherReject_<%=cid%> = true;
                <%
                if (("true").equals(dieOnError)) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                        <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                        <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                        <%
                    } else {
                        %>
                        System.err.println(e.getMessage());
                        <%
                    }
                } 
                %>
            }
          <%}%>
            <%
        } else if (("INSERT_OR_UPDATE").equals(dataAction)) {
            int columnIndex = 1;
            for(Column column : colStruct) {
                if(column.isUpdateKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    %>
                    
                    <% 
                    //#############for feature:2880
                    if(whereSupportNull && column.getColumn().isNullable()) { %>
                    	<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, columnIndex, incomingConnName, cid, NORMAL_TYPE)%>
                    <%  
                    	columnIndex++;
                       }
                     //#############                      
                    %>                    
                    
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate,String.valueOf(ignoreDateOutofRange), column, columnIndex, incomingConnName, cid, NORMAL_TYPE,null)%>
                    <%
                    columnIndex++;
                }
            }
            %>
    
            java.sql.ResultSet rs_<%=cid%> = pstmt_<%=cid %>.executeQuery();
            int checkCount_<%=cid%> = -1;
            while(rs_<%=cid%>.next()) {
                checkCount_<%=cid%> = rs_<%=cid%>.getInt(1);
            }
            if(checkCount_<%=cid%> > 0) {
                <%
                int counterCol = 1;
                
			//start issue0010403 date type     
			if (rejectConnName != null) {
%>
            try {
<%
			}//end issue0010403 date type
			
                for(Column column : colStruct) {
                    if(column.isUpdatable()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                        %>
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate,String.valueOf(ignoreDateOutofRange), column, counterCol, incomingConnName, cid, UPDATE_TYPE,null)%>
                        <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
                            <%
                        }                        
                        counterCol++;
                    }
                }
				if(isDynamic) {
					Column dynamicColumn = getColumn(talendDynCol);
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
					if("Dynamic".equals(typeToGenerate)) {
						if(isEnableDebug) {
						%>
							routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counterCol%>,updateSQLSplits_<%=cid%>);
						<%
						}
						%>
						int count_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtUpdate_<%=cid%>, <%=counterCol-1%>, "<%=dbmsId%>");
					<%
					}
				}
                for(Column column : colStruct) {
                    if(column.isUpdateKey()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                        %>
                        
	                    <% 
	                    //#############for feature:2880
						if(whereSupportNull && column.getColumn().isNullable()) {
							 if(isDynamic){
							%>
							    <%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(talendDynCol.getLabel(),column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
							<%
							}else{
							%>
								<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
							<%
							}
						%>
							<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, counterCol, incomingConnName, cid, UPDATE_TYPE)%>
						<%
							 if(isEnableDebug) {
							     if(isDynamic){
							     %>
    							     query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(talendDynCol.getLabel(),typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "("+incomingConnName+"."+column.getName()+"==null)")%>;
							     <%
							     }else{
							     %>
							         query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_", "("+incomingConnName+"."+column.getName()+"==null)")%>;
							     <%
							     }
							}
							counterCol++;
							}
						 //#############
						%>
                                                         
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate,String.valueOf(ignoreDateOutofRange), column, counterCol, incomingConnName, cid, UPDATE_TYPE, " + count_")%>
                        <%
						if(isEnableDebug) {
							if(isDynamic){
							%>
								query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(talendDynCol.getLabel(),typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
							<%
							}else{
							%>
								query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counterCol, "updateSQLSplits_")%>;
							<%
							}
                        }                        
                        counterCol++;                   
                    }
                }
                if(isEnableDebug) {
                    %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                    <%
                }                
                %>
<%				
				//start issue0010403 date type
				if (rejectConnName == null) {
%>
            try {
<%
				}//end issue0010403 date type
%>   
                    updatedCount_<%=cid%> = updatedCount_<%=cid%> + pstmtUpdate_<%=cid %>.executeUpdate();
                } catch(java.lang.Exception e) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (("true").equals(dieOnError)) {
                        %>
                        throw(e);
                        <%
                    } else {
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {%>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                            %>
                            rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                            <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                            <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                            <%
                        } else {
                            %>
                            System.err.println(e.getMessage());
                            <%
                        }
                    } 
                    %>
                }
            } else {
                <%
                int counterInsert = 1;
                
			//start issue0010403 date type     
			if (rejectConnName != null) {
%>
            try {
<%
			}//end issue0010403 date type
                for(Column columnInsert : colStruct) {
                    if(columnInsert.isInsertable()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnInsert.getColumn().getTalendType(), columnInsert.getColumn().isNullable());
                        %>
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, String.valueOf(ignoreDateOutofRange), columnInsert, counterInsert, incomingConnName, cid, INSERT_TYPE,null)%>
                        <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnInsert, incomingConnName, cid, "query_" ,  counterInsert, "insertSQLSplits_")%>;
                            <%
                        }                        
                        counterInsert++;
                    }
                }
				if(isDynamic) {
					Column dynamicColumn = getColumn(talendDynCol);
					if(isEnableDebug) {
    				%>
						routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counterInsert%>,insertSQLSplits_<%=cid%>);
                	<%
    				}
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
					if("Dynamic".equals(typeToGenerate)) {
					%>
						DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtInsert_<%=cid%>, <%=counterInsert-1%>, "<%=dbmsId%>");
					<%
					}
				}
                if(isEnableDebug) {
                    %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                    <%
                }                
                %>
<%				
				//start issue0010403 date type
				if (rejectConnName == null) {
%>
            try {
<%
				}//end issue0010403 date type
%>   
                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate();
                } catch(java.lang.Exception e) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (("true").equals(dieOnError)) {
                        %>
                        throw(e);
                        <%
                    } else {
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                            %>
                            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                            %>
                            rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                            <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                            <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                            <%
                        } else {
                            %>
                            System.err.println(e.getMessage());
                            <%
                        }
                    } 
                    %>
                }
            }
            nb_line_<%=cid%>++;
            <%
        } else if (("UPDATE_OR_INSERT").equals(dataAction)) {
            %>
            int updateFlag_<%=cid%>=0;
            <%
            int counterColUpdate = 1;
                
			//start issue0010403 date type     
			if (rejectConnName != null) {
%>
            try {
<%
			}//end issue0010403 date type
			
            for(Column columnUpdate : colStruct) {
                if(columnUpdate.isUpdatable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnUpdate.getColumn().getTalendType(), columnUpdate.getColumn().isNullable());
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, String.valueOf(ignoreDateOutofRange), columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE,null)%>
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_")%>;
                        <%
                    }                    
                    counterColUpdate++;
                }
            }
			if(isDynamic) {
				Column dynamicColumn = getColumn(talendDynCol);
				if(isEnableDebug) {
				%>
					routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counterColUpdate%>,updateSQLSplits_<%=cid%>);
				<%
				}
				String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
				if("Dynamic".equals(typeToGenerate)) {
				%>
				
					int count_<%=cid%>=DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtUpdate_<%=cid%>, <%=counterColUpdate-1%>, "<%=dbmsId%>");
				<%
				}
			}
    
            for(Column columnUpdate : colStruct) {
                if(columnUpdate.isUpdateKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnUpdate.getColumn().getTalendType(), columnUpdate.getColumn().isNullable());
                    %>
                        <% 
                        //#############for feature:2880
						if(whereSupportNull && columnUpdate.getColumn().isNullable()) { 
							if(isDynamic){
							%>
								<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(talendDynCol.getLabel(),columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE)%>
							<%
							}else{
							%>
								<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE)%>
							<%
							}
							if(isEnableDebug) {
								if(isDynamic){
								%>
									query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(talendDynCol.getLabel(),typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_", "(("+incomingConnName+"."+columnUpdate.getName()+"==null))")%>;
								<%
								}else{
								%>
									query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_", "(("+incomingConnName+"."+columnUpdate.getName()+"==null))")%>;
								<%
								}

							}
                        	counterColUpdate++;
                           }
                         //#############                      
                        %>                    
                    
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, String.valueOf(ignoreDateOutofRange), columnUpdate, counterColUpdate, incomingConnName, cid, UPDATE_TYPE, " + count_")%>
                    <%
                    if(isEnableDebug) {
						if(isDynamic){
						%>
							query_<%=cid%> = <%=getManager(dbmsId, cid, node).retrieveSQL(talendDynCol.getLabel(),typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_")%>;
						<%
						}else{
						%>
							query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnUpdate, incomingConnName, cid, "query_" , counterColUpdate, "updateSQLSplits_")%>;
						<%
						}
                    }                    
                    counterColUpdate++;
                }
            }
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
            }            
            %>
<%				
				//start issue0010403 date type
				if (rejectConnName == null) {
%>
            try {
<%
				}//end issue0010403 date type
%>   
                updateFlag_<%=cid%>=pstmtUpdate_<%=cid %>.executeUpdate();
                updatedCount_<%=cid%> = updatedCount_<%=cid%>+updateFlag_<%=cid%>;
            } catch(java.lang.Exception e) {
                whetherReject_<%=cid%> = true;
                <%
                if (("true").equals(dieOnError)) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                        <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                        <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                        <%
                    } else {
                        %>
                        System.err.println(e.getMessage());
                        <%
                    }
                } 
                %>
            }
            if(updateFlag_<%=cid%> == 0) {
            	<%
            	if(isEnableDebug) {
            	%>
				query_<%=cid%> = new StringBuffer("");
        		<%
        		}
                int counter = 1;
                
			//start issue0010403 date type     
			if (rejectConnName != null) {
%>
            try {
<%
			}//end issue0010403 date type
			                
                for(Column column : colStruct) {
                    if(column.isInsertable()) {
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                        %>
                        <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, String.valueOf(ignoreDateOutofRange), column, counter, incomingConnName, cid, INSERT_TYPE,null)%>
                        <%
                        if(isEnableDebug) {
                            %>
                            query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , counter, "insertSQLSplits_")%>;
                            <%
                        }                        
                        counter++;
                    }
                }
				if(isDynamic) {
					Column dynamicColumn = getColumn(talendDynCol);
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
					if("Dynamic".equals(typeToGenerate)) {
						if(isEnableDebug) {
						%>
							routines.system.DynamicUtils.debugDynamicSql(query_<%=cid%>,<%=incomingConnName%>.<%=dynamicColumn.getName()%>, <%=counter%>,insertSQLSplits_<%=cid%>);
						<%
						}
					%>
						DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtInsert_<%=cid%>, <%=counter-1%>, "<%=dbmsId%>");
					<%
					}
				}
                if(isEnableDebug) {
                    %>
                    globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                    <%
                }                
                %>
<%				
				//start issue0010403 date type
				if (rejectConnName == null) {
%>
            try {
<%
				}//end issue0010403 date type
%>   
                    insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate(); 
                } catch(java.lang.Exception e) {
                    whetherReject_<%=cid%> = true;
                    <%
                    if (("true").equals(dieOnError)) {
                        %>
                        throw(e);
                        <%
                    } else {
                        if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                            %>
                            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%
                            }
                            %>
                            rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                            <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                            <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                            <%
                        } else {
                            %>
                            System.err.println(e.getMessage());
                            <%
                        }
                    } 
                    %>
                }
            }
           
            nb_line_<%=cid%>++;
            <%
        
        } else if (("DELETE").equals(dataAction)) {
            int keyCounter = 1;
                
			//start issue0010403 date type     
			if (rejectConnName != null) {
%>
            try {
<%
			}//end issue0010403 date type
			
            for(Column column : colStruct) {
                if(column.isDeleteKey()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                    %>
                    <% 
                    //#############for feature:2880
                    if(whereSupportNull && column.getColumn().isNullable()) { %>
                    	<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, keyCounter, incomingConnName, cid, NORMAL_TYPE)%>
                    <%  
                     if(isEnableDebug) {
	                        %>
	                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , keyCounter, "deleteSQLSplits_", "("+incomingConnName+"."+column.getName()+"==null)")%>;
	                        <%
	                    	} 
                    	keyCounter++;
                       }
                     //#############                      
                    %>                     
                    
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, String.valueOf(ignoreDateOutofRange), column, keyCounter, incomingConnName, cid, NORMAL_TYPE,null)%>
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, column, incomingConnName, cid, "query_" , keyCounter, "deleteSQLSplits_")%>;
                        <%
                    }                    
                    keyCounter++;
                }
            }
            if(isEnableDebug) {
                %>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
            }            
            %>
         	<%if(rejectConnName == null &&("true").equals(useBatchSize)) {
    		%>
    		pstmt_<%=cid %>.addBatch();
    		<%if (("true").equals(useBatchSize) && !("").equals(batchSize) && !("0").equals(batchSize)) {
    		%>
    		batchSizeCounter_<%=cid%>++;
    		<%
    		}%>    		    		
    		<%
    		}else {
    		%>
<%				
				//start issue0010403 date type
				if (rejectConnName == null) {
%>
            try {
<%
				}//end issue0010403 date type
%>   
                deletedCount_<%=cid%> = deletedCount_<%=cid%> + pstmt_<%=cid %>.executeUpdate();
            } catch(java.lang.Exception e) {
                whetherReject_<%=cid%> = true;
                <%
                if (("true").equals(dieOnError)) {
                    %>
                    throw(e);
                    <%
                } else {
                    if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
                        %>
                        <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                        <%
                        for(IMetadataColumn column : columnList) {
                            %>
                            <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                            <%
                        }
                        %>
                        rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                        <%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                        <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                        <%
                    } else {
                        %>
                        System.err.println(e.getMessage());
                        <%
                    }
                } 
                %>
            }
            <%
    		}%>
            nb_line_<%=cid%>++;
        <%
        } else if (("INSERT_IF_NOT_EXIST").equals(dataAction)) { 
        int columnIndex = 1;
        for(Column column : colStruct) {
            if(column.isUpdateKey()) {
                String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getColumn().getTalendType(), column.getColumn().isNullable());
                %>
                    <% 
                    //#############for feature:2880
                    if(whereSupportNull && column.getColumn().isNullable()) { %>
                    	<%=getManager(dbmsId, cid, node).generateSetBooleanForNullableKeyStmt(column, columnIndex, incomingConnName, cid, NORMAL_TYPE)%>
                    <% 
                    	columnIndex++;
                       }
                     //#############                      
                    %>                 
                
                <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, String.valueOf(ignoreDateOutofRange), column, columnIndex, incomingConnName, cid, NORMAL_TYPE,null)%>
                <%
                columnIndex++;
            }
        }
        %>
        
        java.sql.ResultSet rs_<%=cid%> = pstmt_<%=cid %>.executeQuery();
        int checkCount_<%=cid%> = -1;
        while(rs_<%=cid%>.next()) {
            checkCount_<%=cid%> = rs_<%=cid%>.getInt(1);
        }
                
        if (checkCount_<%=cid%> < 1) {
             <%
            int counterInsert = 1;
                
			//start issue0010403 date type     
			if (rejectConnName != null) {
%>
            try {
<%
			}//end issue0010403 date type
			
            for(Column columnInsert : colStruct) {
                if(columnInsert.isInsertable()) {
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(columnInsert.getColumn().getTalendType(), columnInsert.getColumn().isNullable());
                    %>
                    <%=getManager(dbmsId, cid).generateSetStmt(typeToGenerate, String.valueOf(ignoreDateOutofRange), columnInsert, counterInsert, incomingConnName, cid, INSERT_TYPE,null)%>
                    <%
                    if(isEnableDebug) {
                        %>
                        query_<%=cid%> = <%=getManager(dbmsId, cid).retrieveSQL(typeToGenerate, columnInsert, incomingConnName, cid, "query_" ,  counterInsert, "insertSQLSplits_")%>;
                        <%
                    }                        
                    counterInsert++;
                }
            }
			if(isDynamic) {
					Column dynamicColumn = getColumn(talendDynCol);
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(dynamicColumn.getColumn().getTalendType(), dynamicColumn.getColumn().isNullable());
					if("Dynamic".equals(typeToGenerate)) {
					%>
						DynamicUtils.writeColumnsToDatabse(<%=incomingConnName%>.<%=dynamicColumn.getName()%>, pstmtInsert_<%=cid%>, <%=counterInsert-1%>, "<%=dbmsId%>");
					<%
					}
				}
            if(isEnableDebug) {%>
                globalMap.put("<%=cid %>_QUERY", query_<%=cid%>.toString().trim());
                <%
            }%>
<%				
				//start issue0010403 date type
				if (rejectConnName == null) {
%>
            try {
<%
				}//end issue0010403 date type
%>   
                insertedCount_<%=cid%> = insertedCount_<%=cid%> + pstmtInsert_<%=cid %>.executeUpdate();
            } catch(java.lang.Exception e) {
				whetherReject_<%=cid%> = true;
                <%
            if (("true").equals(dieOnError)) {
                %>
                throw(e);
                <%
            } else {
                if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
			 %>
	            <%=rejectConnName %> = new <%=rejectConnName %>Struct();
                <%
                for(IMetadataColumn column : columnList) {
                    %>
                    <%=rejectConnName%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                    <%
                }
                %>
                	rejectedCount_<%=cid%> = rejectedCount_<%=cid%> + 1;
                	<%=rejectConnName%>.errorCode = ((java.sql.SQLException)e).getSQLState();
                    <%=rejectConnName%>.errorMessage = e.getMessage() + " - Line: " + tos_count_<%=node.getUniqueName() %>;
                            <%
                        } else {
                            %>
                            System.err.print(e.getMessage());
                            <%
                        }
                    } 
                    %>
                }
            }
            nb_line_<%=cid%>++;
        <%
        }  // end of insert if not exist 
        
        if(outgoingConns != null && outgoingConns.size() > 0) {
            %>
            if(!whetherReject_<%=cid%>) {
                <%
                for(IConnection outgoingConn : outgoingConns) {
                    if(rejectConnName == null || (rejectConnName != null && !outgoingConn.getName().equals(rejectConnName))) {
                        if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
                            
                            %>
                            <%=outgoingConn.getName()%> = new <%=outgoingConn.getName()%>Struct();
                            <%
                            for(IMetadataColumn column : columnList) {
                                %>
                                <%=outgoingConn.getName()%>.<%=column.getLabel()%> = <%=incomingConnName%>.<%=column.getLabel()%>;
                                <%                  
                            }
                        }
                    }
                }
            %>
            }
            <%
        }
            	//////////batch execute by batch size///////
    	if ("true".equals(useBatchSize)&& (rejectConnName==null)) {
    		if(!("").equals(batchSize) && !("0").equals(batchSize)) {
    		%>
    			if ( batchSize_<%=cid%> <= batchSizeCounter_<%=cid%>) {                
                <%if ( (rejectConnName==null) && (("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction))) {
                %>                                                
                try {
						int countSum_<%=cid%> = 0;
						for(int countEach_<%=cid%>: pstmt_<%=cid %>.executeBatch()) {
							if(countEach_<%=cid%> == -2 || countEach_<%=cid%> == -3) {
								break;
							}
							countSum_<%=cid%> += countEach_<%=cid%>;
						}             	
            	    	<%if (("INSERT").equals(dataAction)) {
            	    	%>
            	    		insertedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}else if (("UPDATE").equals(dataAction)) {
            	    	%>
            	    		updatedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}else if (("DELETE").equals(dataAction)) {
            	    	%>
            	    	    deletedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}%>                         	    	
            	    	batchSizeCounter_<%=cid%> = 0;             	                	                	
                }catch (java.sql.BatchUpdateException e){
                	<%if(("true").equals(dieOnError)) {
                	%>
                		throw(e);
                	<%
                	}else {
                	%>
                	int countSum_<%=cid%> = 0;
					for(int countEach_<%=cid%>: e.getUpdateCounts()) {
						countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
					}
					<%if (("INSERT").equals(dataAction)) {
            	    	%>
            	    		insertedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}else if (("UPDATE").equals(dataAction)) {
            	    	%>
            	    		updatedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}else if (("DELETE").equals(dataAction)) {
            	    	%>
            	    	    deletedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}%>     
                	System.err.println(e.getMessage());
                	<%
                	}%>
                }
                <%
                }%>    			
    			
    			
    			
    			}
    		<%	
    		}
    	
    	}
    	
    	////////////commit every////////////
    	if(!useExistingConnection) {
    		if(!("").equals(commitEvery) && !("0").equals(commitEvery)) {
    		    %>
    		    commitCounter_<%=cid%>++;            
                if(commitEvery_<%=cid%> <= commitCounter_<%=cid%>) {
                
                <%if ((rejectConnName==null && "true".equals(useBatchSize)) && (("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)) ) {
                %>
                try {
                		int countSum_<%=cid%> = 0;
						for(int countEach_<%=cid%>: pstmt_<%=cid %>.executeBatch()) {
							if(countEach_<%=cid%> == -2 || countEach_<%=cid%> == -3) {
								break;
							}
							countSum_<%=cid%> += countEach_<%=cid%>;
						}
            	    	<%if (("INSERT").equals(dataAction)) {
            	    	%>
            	    		insertedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}else if (("UPDATE").equals(dataAction)) {
            	    	%>            	    		
            	    		updatedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}else if (("DELETE").equals(dataAction)) {
            	    	%>
            	    	    deletedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}%>            	    
                }catch (java.sql.BatchUpdateException e){
                	<%if(("true").equals(dieOnError)) {
                	%>
						throw(e);
                	<%
                	}else {
                	%>
                	int countSum_<%=cid%> = 0;
					for(int countEach_<%=cid%>: e.getUpdateCounts()) {
						countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
					}
					<%if (("INSERT").equals(dataAction)) {
            	    	%>
            	    		insertedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}else if (("UPDATE").equals(dataAction)) {
            	    	%>
            	    		updatedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}else if (("DELETE").equals(dataAction)) {
            	    	%>
            	    	    deletedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}%>     
                        System.out.println(e.getMessage());
                	<%
                	}%>
                
                }            	                              
                <%
                }%>
                	conn_<%=cid%>.commit();                
                	commitCounter_<%=cid%>=0;
                }	
                <%
    		}
    	}
    	
		if(("true").equals(identityInsert) && useExistingConnection ) {
        %>
		if (isShareIdentity_<%=cid%> ) {
        	 stmt_<%=cid %>.execute("SET IDENTITY_INSERT ["+ tableName_<%=cid%> +"] OFF");
        }
        <%
   		 } 
    }
    %>
