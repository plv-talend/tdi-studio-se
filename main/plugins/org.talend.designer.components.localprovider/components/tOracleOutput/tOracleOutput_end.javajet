<%@ jet 
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
    java.util.List
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.process.IProcess
"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	IProcess process = node.getProcess();
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(process, "__LOG4J_ACTIVATE__"));
	String cid = node.getUniqueName();
	
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
	
	String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
	
	String dbVersion = ElementParameterParser.getValue(node, "__DB_VERSION__"); 
	boolean isUseBatchByDBVersion = !"ORACLE_8".equalsIgnoreCase(dbVersion);	
	
	boolean useExistingConnection = "true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
	
    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	
	String dbschema = ElementParameterParser.getValue(node, "__SCHEMA_DB__");
	
	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
	
	String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");	
	
	boolean useSpatialOptions = ("true").equals(ElementParameterParser.getValue(node,"__USE_SPATIAL_OPTIONS__"));
	
	boolean createSpatialIndex = ("true").equals(ElementParameterParser.getValue(node,"__SPATIAL_INDEX__"));
	
	String indexAccuracy = ElementParameterParser.getValue(node, "__SPATIAL_INDEX_ACCURACY__");
	
	String useBatchSize = ElementParameterParser.getValue(node, "__USE_BATCH_SIZE__");
    String batchSize =ElementParameterParser.getValue(node, "__BATCH_SIZE__");
	
	List<IMetadataColumn> rejectColumnList = null;
    IMetadataTable metadataTable = node.getMetadataFromConnector("REJECT");
    if(metadataTable != null) {
        rejectColumnList = metadataTable.getListColumns();      
    }
	
    if (useSpatialOptions && (("DROP_CREATE").equals(tableAction) || ("CREATE").equals(tableAction) 
    		|| ("CREATE_IF_NOT_EXISTS").equals(tableAction) || ("DROP_IF_EXISTS_AND_CREATE").equals(tableAction))) {

	    int targetSRID = -1;
	    try {
	      	targetSRID = Integer.parseInt(ElementParameterParser.getValue(node,"__SRID__"));
	    }
	    catch (NumberFormatException e) {
			%>
	     	// TODO unable to parse integer: <%=ElementParameterParser.getValue(node,"__SRID__")%>
	     	// TODO error: <%=e.getMessage()%>
			<%
	     	e.printStackTrace();
	    }
		%>
		java.sql.Statement stmtCreateGeoColumns_<%=cid%> = conn_<%=cid%>.createStatement();
		
		// Delete geometry columns entry if already exists.
		String deleteGeometryColumns_<%=cid %> = "DELETE FROM user_sdo_geom_metadata "
												+ "WHERE TABLE_NAME='" + <%=tableName.toUpperCase(java.util.Locale.US) %> + "'";
		stmtCreateGeoColumns_<%=cid%>.execute(deleteGeometryColumns_<%=cid %>);

		for (String column: geometryColumnToExtends.keySet()) {
		    com.vividsolutions.jts.geom.Envelope extend = geometryColumnToExtends.get(column);
		    
			// Create new entry in geometry columns table
	        String insertGeometryColumns_<%=cid %> = "INSERT INTO user_sdo_geom_metadata (TABLE_NAME, COLUMN_NAME, DIMINFO, SRID) VALUES ('" 
	        										+ <%=tableName.toUpperCase(java.util.Locale.US) %> + "','" + column.toUpperCase(java.util.Locale.US) + "', "
	        										+ "MDSYS.SDO_DIM_ARRAY(MDSYS.SDO_DIM_ELEMENT('x', " + extend.getMinX() + ", " + extend.getMaxX() + ", <%=indexAccuracy %>), "
	        										+ "MDSYS.SDO_DIM_ELEMENT('y', " + extend.getMinY() + ", " + extend.getMaxY() + ", <%=indexAccuracy %>)), "
	        										+ <%=targetSRID < 0 ? "\"NULL\"" : targetSRID %> +")";
			<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - Executing '" +  insertGeometryColumns_<%=cid %> + "'.");
			<%}%>										
	    	stmtCreateGeoColumns_<%=cid%>.execute(insertGeometryColumns_<%=cid %>);
	    	<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - Execute '" + insertGeometryColumns_<%=cid %> + "' has succeeded.");
			<%}%>
    	}
        
        stmtCreateGeoColumns_<%=cid%>.close();
		<%
	}
	if (createSpatialIndex && useSpatialOptions) {
		%>
		for (String geometryColumnName: geometryColumnToExtends.keySet()) {

			String index_name = "spatialidx_"+<%=tableName %>+"_" + geometryColumnName;
			if (index_name.length() > 30) {
				index_name = index_name.substring(0, 29);
			}
			
	    	java.sql.Statement stmtCreateIndex_<%=cid%> = conn_<%=cid%>.createStatement();
			// Drop spatial index if exists
			String dropIndex_<%=cid %> = "DROP INDEX "+index_name;
	        try {
	        	<%if(isLog4jEnabled){%>
					log.info("<%=cid%> - Executing '" + dropIndex_<%=cid %> + "'.");
				<%}%>
				stmtCreateIndex_<%=cid%>.execute(dropIndex_<%=cid %>);
				<%if(isLog4jEnabled){%>
					log.info("<%=cid%> - Execute '" + dropIndex_<%=cid%> + "' has succeeded.");
				<%}%>
			}
			catch (java.sql.SQLException e_<%=cid%>) {
				<%if(isLog4jEnabled){%>
					log.warn("<%=cid%> - " +  e_<%=cid%>.getMessage());
				<%}%>
			}
			
			// Create spatial index using GIST on geometry columns
			String createIndex_<%=cid %> = "CREATE INDEX "+index_name + " " 
						+ "ON " + <%=tableName %> + "(" + geometryColumnName + ") "
						+ "INDEXTYPE IS MDSYS.SPATIAL_INDEX";
			<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - Executing '" + createIndex_<%=cid %> + "'.");
			<%}%>
	        stmtCreateIndex_<%=cid%>.execute(createIndex_<%=cid %>);
        	<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - Execute " + createIndex_<%=cid%> + "' has succeeded.");
			<%}%>
	        stmtCreateIndex_<%=cid%>.close();
	    }
		<%
	}
    
	
    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }

	
    if(("INSERT_OR_UPDATE").equals(dataAction)) {
        %>
        if(pstmtUpdate_<%=cid%> != null){

            pstmtUpdate_<%=cid %>.close();
            
        } 
        if(pstmtInsert_<%=cid %> != null){

            pstmtInsert_<%=cid %>.close();
            
        }
        if(pstmt_<%=cid %> != null) {

            pstmt_<%=cid %>.close();
            
        }        
        <%
    } else if(("UPDATE_OR_INSERT").equals(dataAction)) {
        %>
        if(pstmtUpdate_<%=cid%> != null){

            pstmtUpdate_<%=cid %>.close();
            
        } 
        if(pstmtInsert_<%=cid %> != null){

            pstmtInsert_<%=cid %>.close();
            
        }        
        <%
    } else { // dataAction equals "INSERT" or "UPDATE" or "DELETE" 
        %>
            <%if ((rejectConnName==null && isUseBatchByDBVersion && !useExistingConnection) && (("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction))) {
            %>                
                try {
                	if (pstmt_<%=cid %> != null) { 
						<%if (isLog4jEnabled && ("true").equals(useBatchSize) && !("").equals(batchSize) && !("0").equals(batchSize)) {%>
							log.debug("<%=cid%> - Executing the <%=dataAction%> batch.");
						<%}%>
						pstmt_<%=cid %>.executeBatch();
						<%if (isLog4jEnabled && ("true").equals(useBatchSize) && !("").equals(batchSize) && !("0").equals(batchSize)) {%>						
							log.debug("<%=cid%> - The <%=dataAction%> batch execution has succeeded.");
						<%}%>
            	    }          	    
                }catch (java.sql.BatchUpdateException e_<%=cid%>){
                	<%if(("true").equals(dieOnError)) {
                	%>
						<%if(isLog4jEnabled){%>
							log.fatal("<%=cid%> - " + e_<%=cid%>.getMessage());
						<%}%>
                		throw(e_<%=cid%>);
                	<%
                	}else {
                	%>
					<%if(isLog4jEnabled){%>
						log.error("<%=cid%> - " + e_<%=cid%>.getMessage());
					<%}%>
                	System.out.println(e_<%=cid%>.getMessage());
                	<%
                	}%>                	
            	}
            	if (pstmt_<%=cid %> != null) { 
	            	tmp_batchUpdateCount_<%=cid%> = pstmt_<%=cid %>.getUpdateCount();            	
	    	    	<%if (("INSERT").equals(dataAction)) {
	    	    	%>
	    	    		insertedCount_<%=cid%> 
	    	    	<%
	    	    	}else if (("UPDATE").equals(dataAction)) {
	    	    	%>
	    	    		updatedCount_<%=cid%>
	    	    	<%
	    	    	}else if (("DELETE").equals(dataAction)) {
	    	    	%>
	    	    	    deletedCount_<%=cid%>
	    	    	<%
	    	    	}%>
	    	    	+= (tmp_batchUpdateCount_<%=cid%>!=-1?tmp_batchUpdateCount_<%=cid%>:0);                                  
                }
            <%
            }%>        
        if(pstmt_<%=cid %> != null) {            
			<%
			//to fixed: bug8422
			if(!(cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){
			%>
				pstmt_<%=cid %>.close();
			<%
			}else{
			%>
				SharedDBPreparedStatement.releasePreparedStatement(keyPsmt_<%=cid%>);   
			<%
			}
			%>                    
        }        
        <%
    }   
    %>

    <%
	if(!useExistingConnection)
	{
		if(!("").equals(commitEvery) && !("0").equals(commitEvery))
		{
		    %>
			<%if(isLog4jEnabled){%>
				log.debug("<%=cid%> - Starting to commit " + commitCounter_<%=cid%>+ " records.");
			<%}%>
		    conn_<%=cid%>.commit();
			<%if(isLog4jEnabled){%>
				log.debug("<%=cid%> - Commit has succeeded.");
			<%}%>
		    <%
		}
		%>	
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Closing the connection to the database.");
		<%}%>
		conn_<%=cid%> .close();
		resourceMap.put("finish_<%=cid%>", true);
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Connection to the database closed.");
		<%}%>
    	<%
	}
    %>


<%@ include file="../templates/DB/Output/DBOutputEndGlobalVars.javajet"%>

	<%
	if(isLog4jEnabled){
		if(("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)) {
    		if (("INSERT").equals(dataAction)) {
	%>
				log.info("<%=cid%> - Has inserted "+nb_line_inserted_<%=cid%> + " records.");
	<%
    		}else if (("UPDATE").equals(dataAction)) {
	%>
				log.info("<%=cid%> - Has updated "+nb_line_update_<%=cid%> + " records.");
	<%
    		}else if (("DELETE").equals(dataAction)) {
	%>
				log.info("<%=cid%> - Has deleted "+nb_line_deleted_<%=cid%> + " records.");
	<%
    		}
    	}else if("UPDATE_OR_INSERT".equals(dataAction)){
	%>
			log.info("<%=cid%> - Has updated "+nb_line_update_<%=cid%> + " records.");
			log.info("<%=cid%> - Has inserted "+nb_line_inserted_<%=cid%> + " records.");
    <%
    	}else if("INSERT_OR_UPDATE".equals(dataAction)){
    %>
			log.info("<%=cid%> - Has inserted "+nb_line_inserted_<%=cid%> + " records.");
			log.info("<%=cid%> - Has updated "+nb_line_update_<%=cid%> + " records.");
    
    <%
    	}
    	if(rejectConnName != null && rejectColumnList != null && rejectColumnList.size() > 0) {
	%>
			log.info("<%=cid%> - Has rejected "+nb_line_rejected_<%=cid%> + " records.");
	<%
		}
	%>
		log.info("<%=cid%> - Done.");
	<%
	}
	%>