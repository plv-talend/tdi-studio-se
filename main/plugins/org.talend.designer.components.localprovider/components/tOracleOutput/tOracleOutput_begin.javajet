<%@ jet 
imports="
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser  
        org.talend.core.model.process.IConnection
		org.talend.core.model.metadata.IMetadataTable 
        org.talend.core.model.metadata.MappingTypeRetriever
        org.talend.core.model.metadata.MetadataTalendType
		java.util.List
		java.util.ArrayList
		java.util.Map
		java.util.HashMap
		org.talend.core.model.process.IProcess
	" 
skeleton="../templates/db_output_bulk.skeleton"
%>
<%@ include file="../templates/Log4j/Log4jDBConnUtil.javajet"%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();	
String cid = node.getUniqueName();	
List<Map<String, String>> addCols = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__" );    
boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));    
List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");    
String dbname= ElementParameterParser.getValue(node, "__DBNAME__");
String localServiceName = ElementParameterParser.getValue(node, "__LOCAL_SERVICE_NAME__");        
String dbhost = ElementParameterParser.getValue(node, "__HOST__");    
String dbport = ElementParameterParser.getValue(node, "__PORT__");	
String dbuser= ElementParameterParser.getValue(node, "__USER__");	
String dbpwd= ElementParameterParser.getValue(node, "__PASS__");	
String table = ElementParameterParser.getValue(node,"__TABLE__");	
String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");	
String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");	
String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");	
String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");	
String tableSchema = ElementParameterParser.getValue(node,"__TABLESCHEMA__");
boolean convertToUppercase = ("true").equals(ElementParameterParser.getValue(node, "__CONVERT_COLUMN_TABLE_TO_UPPERCASE__"));
boolean isEnableDebug = ("true").equals(ElementParameterParser.getValue(node,"__ENABLE_DEBUG_MODE__"));
String useBatchSize = ElementParameterParser.getValue(node,"__USE_BATCH_SIZE__");
String batchSize=ElementParameterParser.getValue(node,"__BATCH_SIZE__");
String dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
String dbVersion =  ElementParameterParser.getValue(node, "__DB_VERSION__");
boolean useSpatialOptions = ("true").equals(ElementParameterParser.getValue(node,"__USE_SPATIAL_OPTIONS__"));
boolean createSpatialIndex = ("true").equals(ElementParameterParser.getValue(node,"__SPATIAL_INDEX__"));
boolean createGeometryColumns = ("true").equals(ElementParameterParser.getValue(node,"__GEOMETRY_COLUMNS__"));
IProcess process = node.getProcess();
boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(process, "__LOG4J_ACTIVATE__"));

log4jCodeGenerateUtil.infoComponentStart(node);
log4jCodeGenerateUtil.initDbDebugRowBuffer();	
if (useSpatialOptions) {
	int targetSRID = -1;
	try {
	  	targetSRID = Integer.parseInt(ElementParameterParser.getValue(node,"__SRID__"));
	}
	catch (NumberFormatException e) {
	%>
	 	// TODO unable to parse integer: <%=ElementParameterParser.getValue(node,"__SRID__")%>
	 	// TODO error: <%=e.getMessage()%>
	<%
		e.printStackTrace();
	}
	%>
	/* initialize feature count */
	int nbFeature_<%=cid %> = 0;
	
	java.util.Map<String, com.vividsolutions.jts.geom.Envelope> geometryColumnToExtends = new java.util.HashMap<String, com.vividsolutions.jts.geom.Envelope>();
	<%
}
%>


<%
getManager(dbmsId, cid, node);

boolean isDynamic = false;
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
	isDynamic = metadata.isDynamicSchema(); 
}

List<IMetadataColumn> columnList = getColumnList(node);
List<Column> stmtStructure = null;
Manager manager = null;

if(columnList != null && columnList.size() > 0) {
    stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
    isDynamic = isDynamic && !getManager(dbmsId, cid).isDynamicColumnReplaced();
    
    if(convertToUppercase) {
        for(Column column : stmtStructure) {
            if(column.isReplaced()) {
                for (Column replacedColumn : column.getReplacement()) {
                    replacedColumn.setColumnName(replacedColumn.getColumnName().toUpperCase());
                }
            } else if(!column.isDynamic()){
                column.setColumnName(column.getColumnName().toUpperCase());
            }
        }
    }    
}
boolean xmlTypeExist = false;
for(Column column : stmtStructure) {
	//when use Additional column column.getColumn() == null
	if (column.getColumn()!= null && "XMLTYPE".equals(column.getColumn().getType()) && !column.isDynamic()) {
		column.setSqlStmt("XMLType(?)");
		xmlTypeExist = true;
	}
}
%>

<%
if(("UPDATE").equals(dataAction) || ("INSERT_OR_UPDATE").equals(dataAction) || ("UPDATE_OR_INSERT").equals(dataAction)) {
    int updateKeyCount = 0;
    if(stmtStructure != null) {
        for(Column column : stmtStructure) {
            if(column.isUpdateKey() && !column.isDynamic()) {
                updateKeyCount++;
            }
        }
        %>
        int updateKeyCount_<%=cid%> = <%=updateKeyCount%>;
        if(updateKeyCount_<%=cid%> < 1) {
			<%if(isLog4jEnabled){%>
				log.fatal("<%=cid%> - For update ,the schema must have a key");
			<%}%>	
            throw new RuntimeException("For update, the schema must have a key");
        }
        <%
    }
} else if(("DELETE").equals(dataAction)) {
    int deleteKeyCount = 0;
    if(stmtStructure != null) {
        for(Column column : stmtStructure) {
            if(column.isDeleteKey() && !column.isDynamic()) {
                deleteKeyCount++;
            }
        }
        %>
        int deleteKeyCount_<%=cid%> = <%=deleteKeyCount%>;
        if(deleteKeyCount_<%=cid%> < 1) {
			<%if(isLog4jEnabled){%>
				log.fatal("<%=cid%> - For delete ,the schema must have a key");
			<%}%>	
            throw new RuntimeException("For delete, the schema must have a key");
        }
        <%
    }
}
%>
int nb_line_<%=cid%> = 0;
int nb_line_update_<%=cid%> = 0;
int nb_line_inserted_<%=cid%> = 0;
int nb_line_deleted_<%=cid%> = 0;
int nb_line_rejected_<%=cid%> = 0;

int tmp_batchUpdateCount_<%=cid%> = 0;

int deletedCount_<%=cid%>=0;
int updatedCount_<%=cid%>=0;
int insertedCount_<%=cid%>=0;
int rejectedCount_<%=cid%>=0;

boolean whetherReject_<%=cid%> = false;

java.sql.Connection conn_<%=cid%> = null;

//optional table
String dbschema_<%=cid%> = null;
String tableName_<%=cid%> = null;
<%
boolean useExistingConnection = "true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
if(useExistingConnection) {
	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	String conn = "conn_" + connection;
	String schema = "dbschema_" + connection;
	%>
	dbschema_<%=cid%> = (String)globalMap.get("<%=schema%>");
	conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
<%	
	INode connectionNode = null; 
	for (INode processNode : node.getProcess().getGeneratingNodes()) { 
		if(connection.equals(processNode.getUniqueName())) { 
			connectionNode = processNode; 
			break; 
		} 
	} 
	boolean specify_alias = "true".equals(ElementParameterParser.getValue(connectionNode, "__SPECIFY_DATASOURCE_ALIAS__"));
	if(specify_alias){
		String alias = ElementParameterParser.getValue(connectionNode, "__DATASOURCE_ALIAS__"); 
%> 
		if (null == conn_<%=cid%>) {
			java.util.Map<String, routines.system.TalendDataSource> dataSources_<%=cid%> = (java.util.Map<String, routines.system.TalendDataSource>) globalMap.get(KEY_DB_DATASOURCES); 
			conn_<%=cid%> = dataSources_<%=cid%>.get(<%=(null != alias && !("".equals(alias)))?alias:"\"\""%>).getConnection();
		}
<%
	}
%>
	
	<%if(isLog4jEnabled){%>	
		if(conn_<%=cid%> != null) {
			if(conn_<%=cid%>.getMetaData() != null) {
				log.info("<%=cid%> - Uses an existing connection as " + conn_<%=cid%>.getMetaData().getUserName() + ". Connection URL: " + conn_<%=cid%>.getMetaData().getURL() + ".");
			}
		}
	<%}%>
	
<%
} else {
	boolean specify_alias = "true".equals(ElementParameterParser.getValue(node, "__SPECIFY_DATASOURCE_ALIAS__"));
	if(specify_alias){
		String alias = ElementParameterParser.getValue(node, "__DATASOURCE_ALIAS__");
%>
	java.util.Map<String, routines.system.TalendDataSource> dataSources_<%=cid%> = (java.util.Map<String, routines.system.TalendDataSource>) globalMap.get(KEY_DB_DATASOURCES);
	if (null != dataSources_<%=cid%>) {
		conn_<%=cid %> = dataSources_<%=cid%>.get(<%=(null != alias && !("".equals(alias)))?alias:"\"\""%>).getConnection();
	} else {
<%
}
%>
		<%if("ORACLE_11".equals(dbVersion) || "ORACLE_11-6".equals(dbVersion) ){%>
			String driverClass_<%=cid%> = "oracle.jdbc.OracleDriver";
		<%}else {%>
			String driverClass_<%=cid%> = "oracle.jdbc.driver.OracleDriver";
		<%}%>
			java.lang.Class.forName(driverClass_<%=cid%>);	
<%
		String connectionType = ElementParameterParser.getValue(node, "__CONNECTION_TYPE__");
		String jdbcURL = ElementParameterParser.getValue(node, "__JDBC_URL__");
		String rac_url = ElementParameterParser.getValue(node, "__RAC_URL__");
%>
		String url_<%=cid%> = null;
<%
		if("ORACLE_RAC".equals(connectionType)) {
%>
			url_<%=cid %> = <%=rac_url%>;        
<%
		} else if(("ORACLE_SID").equals(connectionType)) {
%>
			url_<%=cid%> = "jdbc:oracle:thin:@" + <%=dbhost%> + ":" + <%=dbport%> + ":" + <%=dbname%>;
<%
		} else if(("ORACLE_SERVICE_NAME").equals(connectionType)) {
%>
			url_<%=cid%> = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + <%=dbhost%> + ")(port=" + <%=dbport%> + "))(connect_data=(service_name=" + <%=dbname%> + ")))";
<%
		} else if(("ORACLE_OCI").equals(connectionType)) {
%>
			url_<%=cid%> = "jdbc:oracle:oci8:@" + <%=localServiceName%>;;
<%
		}else if(("ORACLE_WALLET").equals(connectionType)) {
%>
			url_<%=cid%> = <%=jdbcURL%>;
<%
		}
%>
		String dbUser_<%=cid%> = <%=dbuser%>;
		String dbPwd_<%=cid%> = <%=dbpwd%>;
		dbschema_<%=cid%> = <%=tableSchema%>;	
		<%
		log4jCodeGenerateUtil.debugConnectionParams(node);	
		%>	
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Connection attempt to '" + url_<%=cid%> +"' with the username '" + dbUser_<%=cid%> + "'.");
		<%}%>	
		
<%
		if(("ORACLE_WALLET").equals(connectionType)) {
%>
			conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>);
			if(dbschema_<%=cid%>==null||"".equals(dbschema_<%=cid%>)) //get schema from connection
				{
				dbschema_<%=cid%>=conn_<%=cid%>.getMetaData().getUserName();
				}
		
<%
		}else if(dbproperties == null || ("\"\"").equals(dbproperties) || ("").equals(dbproperties)) {
%>
			conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>, dbUser_<%=cid%>, dbPwd_<%=cid%>);
<%
		} else {
%>
		String atnParams_<%=cid%> = <%=dbproperties%>;
		atnParams_<%=cid%> = atnParams_<%=cid%>.replaceAll("&", "\n");
		java.util.Properties atnParamsPrope_<%=cid%> = new java.util.Properties();
		atnParamsPrope_<%=cid%>.put("user",dbUser_<%=cid%>);
		atnParamsPrope_<%=cid%>.put("password",dbPwd_<%=cid%>);
		atnParamsPrope_<%=cid%>.load(new java.io.ByteArrayInputStream(atnParams_<%=cid%>.getBytes()));
		conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid%>, atnParamsPrope_<%=cid%>);
<%
		}
%>
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Connection to '" + url_<%=cid%> + "' has succeeded.");
		<%}%>
<%
	if(specify_alias){
%>
	}
<%
	}
%>
	resourceMap.put("conn_<%=cid%>", conn_<%=cid%>);
<%
    if(!("").equals(commitEvery)&&!("0").equals(commitEvery)) {
        %>
        conn_<%=cid%>.setAutoCommit(false);
        int commitEvery_<%=cid%> = <%=commitEvery%>;        
        int commitCounter_<%=cid%> = 0;        
        <%
    }
}

if (("true").equals(useBatchSize)) {
    if(!("").equals(batchSize)&&!("0").equals(batchSize)) {
%>
   int batchSize_<%=cid%> = <%=batchSize%>;
   int batchSizeCounter_<%=cid%>=0;
<%   
   }
}
%> 

<%

if(!isDynamic) {
%>
int count_<%=cid%>=0;
<%
///// hint options/////
boolean useHintOptions = ("true").equals(ElementParameterParser.getValue(node,"__USE_HINT_OPTIONS__"));
Map<String, String> hintsValues = null; 
if (useHintOptions) {
	List<Map<String, String>> hintOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__HINT_OPTIONS__");
	hintsValues = new HashMap<String, String>();
	String hintValue = null;
	boolean firstInsert = true;
	boolean firstUpdate = true;
	boolean firstDelete = true;
	boolean firstTableName = true;
	for(java.util.Map<String, String> option : hintOptions) {
		//get
		if(option.get("HINT").matches("\"/\\*NORMALIZED_HINT\\*/\"")) {
			String id = cid.replace(node.getComponent().getName() + "_", "");
			hintValue = "\"/*\"+" + table + "+\".\" + "  + "\"" + option.get("SQL_STMT")+ ".\"" + "+" +  id   +  "+\"*/\" " ;
		}else if (option.get("HINT").matches("\"/\\*+.*\\*/\"")) {
			hintValue = option.get("HINT");	
		}
		//set
		if ("INSERT".equalsIgnoreCase(option.get("SQL_STMT"))){
			if(firstInsert){
				hintsValues.put("INSERT", hintValue) ;
				firstInsert = false;
			}else {
				hintsValues.put("INSERT", hintsValues.get("INSERT") + "+" + hintValue) ;
			}									
		}else if ("UPDATE".equalsIgnoreCase(option.get("SQL_STMT"))) {
			if(firstUpdate){
				hintsValues.put("UPDATE", hintValue) ;
				firstUpdate = false;
			}else {
				hintsValues.put("UPDATE", hintsValues.get("UPDATE") + "+" + hintValue) ;
			}
		}else if ("DELETE".equalsIgnoreCase(option.get("SQL_STMT"))) {
			if (firstDelete){
				hintsValues.put("DELETE", hintValue) ;
				firstDelete =false;
			}else {
				hintsValues.put("DELETE", hintsValues.get("DELETE") + "+" + hintValue) ;
			}		
		}else if ("TABLE_NAME".equalsIgnoreCase(option.get("SQL_STMT"))){
			if (firstTableName){
				hintsValues.put("TABLE_NAME", hintValue) ;
				firstTableName = false;
			}else {
				hintsValues.put("TABLE_NAME", hintsValues.get("TABLE_NAME") + "+" + hintValue) ;
			}
		}
	}
} 
//// hint options end ////
%>

if(dbschema_<%=cid%> == null || dbschema_<%=cid%>.trim().length() == 0) {
    tableName_<%=cid%> = <%=table%><%=convertToUppercase ? ".toUpperCase()" : ""%>;
} else {
    tableName_<%=cid%> = dbschema_<%=cid%> + "." + <%=table%><%=convertToUppercase ? ".toUpperCase()" : ""%>;    
}
    <%@ include file="../templates/_hintTableName.javajet" %>
<%
if(columnList != null && columnList.size()>0) {    
    %>
    <%@ include file="../templates/_tableActionForOutput.javajet"%>
    <%
    Map<String, StringBuilder> actionSQLMap = getManager(dbmsId, cid).createProcessSQL(stmtStructure);
    StringBuilder insertColName = actionSQLMap.get(INSERT_COLUMN_NAME);   
    StringBuilder insertValueStmt = actionSQLMap.get(INSERT_VALUE_STMT);    
    StringBuilder updateSetStmt = actionSQLMap.get(UPDATE_SET_STMT);    
    StringBuilder updateWhereStmt = actionSQLMap.get(UPDATE_WHERE_STMT);
    StringBuilder deleteWhereStmt = actionSQLMap.get(DELETE_WHERE_STMT);

	if(("INSERT").equals(dataAction)) {
	    %>
	    String insert_<%=cid%> = "INSERT INTO " + tableName_<%=cid%> + " (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
	   	<%@ include file="../templates/_hintInsert.javajet" %>	    
	    
                <%
                //to fixed: bug8422
                if(!(cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){%>
                        java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
                <%}%>
                        
                <%
                //to fixed: bug8422
                if((cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){ %>
                		java.sql.PreparedStatement pstmt_<%=cid %> = null;         
                        // [%connection%][psmt][tableName]
                        String keyPsmt_<%=cid %> = conn_<%=cid%> + "[psmt]" + "[" + <%=table%> + "]";
                        pstmt_<%=cid %> = SharedDBPreparedStatement.getSharedPreparedStatement(conn_<%=cid%>,insert_<%=cid%>,keyPsmt_<%=cid%>);
                <%}%>
	    
	    <%
	} else if (("UPDATE").equals(dataAction)) {
	    %>
	    String update_<%=cid%> = "UPDATE " + tableName_<%=cid%> + " SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
    	<%@ include file="../templates/_hintUpdate.javajet" %>
	    java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
	    <%		
	} else if (("INSERT_OR_UPDATE").equals(dataAction)) {
	    %>
	    java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("SELECT COUNT(1) FROM " + tableName_<%=cid%> + " WHERE <%=updateWhereStmt.toString()%>");
	    String insert_<%=cid%> = "INSERT INTO " + tableName_<%=cid%> + " (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
	   	<%@ include file="../templates/_hintInsert.javajet" %>
	    java.sql.PreparedStatement pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);
	    String update_<%=cid%> = "UPDATE " + tableName_<%=cid%> + " SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
	    <%@ include file="../templates/_hintUpdate.javajet" %>
	    java.sql.PreparedStatement pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);
	    <%
	} else if (("UPDATE_OR_INSERT").equals(dataAction)) {
	    %>
	    String update_<%=cid%> = "UPDATE " + tableName_<%=cid%> + " SET <%=updateSetStmt.toString()%> WHERE <%=updateWhereStmt.toString()%>";
	   	<%@ include file="../templates/_hintUpdate.javajet" %>
	    java.sql.PreparedStatement pstmtUpdate_<%=cid %> = conn_<%=cid%>.prepareStatement(update_<%=cid%>);	    
	    String insert_<%=cid%> = "INSERT INTO " + tableName_<%=cid%> + " (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)";
	   	<%@ include file="../templates/_hintInsert.javajet" %>
	    java.sql.PreparedStatement pstmtInsert_<%=cid %> = conn_<%=cid%>.prepareStatement(insert_<%=cid%>);		
	    <%			
	} else if (("DELETE").equals(dataAction)) {
	    %>
	    String delete_<%=cid%> = "DELETE FROM " + tableName_<%=cid%> + " WHERE <%=deleteWhereStmt.toString()%>";
	    <%@ include file="../templates/_hintDelete.javajet" %>
	    java.sql.PreparedStatement pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(delete_<%=cid%>);
	    <%		
	}
    if(isEnableDebug) {
        %>
        StringBuffer query_<%=cid%> = null;
	   <%@ include file="../templates/DB/Output/splitSQLForAllDBInBegin.javajet" %>
	   <%
    }
    if((createGeometryColumns || createSpatialIndex) && useSpatialOptions) {
    	%>
    	// Initialize SRID
    	int SRID_<%=cid %> = 0;
    	int dimension_<%=cid %> = 0; 
    	boolean firstGeometry_<%=cid %> = true;
    	<%
    }
}
%>
<%
	if (xmlTypeExist) {
%>
	class XMLTypeUtil_<%=cid%> {
		public oracle.sql.CLOB getCLOB(String xmlData, java.sql.Connection conn) throws java.sql.SQLException{
		  oracle.sql.CLOB tempClob = null;
		  try{
		    // If the temporary CLOB has not yet been created, create one
		    tempClob = oracle.sql.CLOB.createTemporary(conn, true, oracle.sql.CLOB.DURATION_SESSION); 
		 
		    // Open the temporary CLOB in readwrite mode, to enable writing
		    tempClob.open(oracle.sql.CLOB.MODE_READWRITE); 
		    // Get the output stream to write
		    java.io.Writer tempClobWriter = tempClob.getCharacterOutputStream(); 
		    // Write the data into the temporary CLOB
		    tempClobWriter.write(xmlData); 
		 
		    // Flush and close the stream
		    tempClobWriter.flush();
		    tempClobWriter.close(); 
		 
		    // Close the temporary CLOB 
		    tempClob.close();    
		  } catch( java.sql.SQLException sqlexp){
		  	<%if(isLog4jEnabled){%>
		  		log.error("<%=cid %> - " + sqlexp.getMessage());
		  	<%}%>
		    tempClob.freeTemporary(); 
		    sqlexp.printStackTrace();
		  } catch(java.lang.Exception exp){
		  	<%if(isLog4jEnabled){%>
		  		log.error("<%=cid %> - " + exp.getMessage());
		  	<%}%>
		    tempClob.freeTemporary(); 
		    exp.printStackTrace();
		  }
		  return tempClob; 
		}
	}
	XMLTypeUtil_<%=cid%> xmlTypeUtil_<%=cid%> = null;
	xmlTypeUtil_<%=cid%> = new XMLTypeUtil_<%=cid%>();
<%
	}
}

if(isDynamic) {
%>
	java.sql.PreparedStatement pstmt_<%=cid %> =null;
	java.sql.PreparedStatement pstmtInsert_<%=cid %> =null;
	java.sql.PreparedStatement pstmtUpdate_<%=cid %> =null;
<%
}
%>




